
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003114  08003114  00013114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000660  20000000  080031c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000012fc  20000660  08003828  00020660  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000195c  08003828  0002195c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020660  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001af96  00000000  00000000  00020689  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003a6c  00000000  00000000  0003b61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007739  00000000  00000000  0003f08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a98  00000000  00000000  000467c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001048  00000000  00000000  00047260  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000072d2  00000000  00000000  000482a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000390d  00000000  00000000  0004f57a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00052e87  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c28  00000000  00000000  00052f04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000660 	.word	0x20000660
 8000128:	00000000 	.word	0x00000000
 800012c:	080030fc 	.word	0x080030fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000664 	.word	0x20000664
 8000148:	080030fc 	.word	0x080030fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000618 	.word	0x20000618
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 fcc6 	bl	8002b4c <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200008a8 	.word	0x200008a8
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200008a8 	.word	0x200008a8

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002e2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ec:	f022 0204 	bicne.w	r2, r2, #4
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002f8:	4770      	bx	lr

080002fa <HAL_SYSTICK_IRQHandler>:
{
 80002fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002fc:	f7ff fffc 	bl	80002f8 <HAL_SYSTICK_Callback>
 8000300:	bd08      	pop	{r3, pc}
	...

08000304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000308:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800030a:	4616      	mov	r6, r2
 800030c:	4b65      	ldr	r3, [pc, #404]	; (80004a4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800030e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004b4 <HAL_GPIO_Init+0x1b0>
 8000312:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004b8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000316:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800031a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800031c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000320:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000324:	45a0      	cmp	r8, r4
 8000326:	d17f      	bne.n	8000428 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000328:	684d      	ldr	r5, [r1, #4]
 800032a:	2d12      	cmp	r5, #18
 800032c:	f000 80af 	beq.w	800048e <HAL_GPIO_Init+0x18a>
 8000330:	f200 8088 	bhi.w	8000444 <HAL_GPIO_Init+0x140>
 8000334:	2d02      	cmp	r5, #2
 8000336:	f000 80a7 	beq.w	8000488 <HAL_GPIO_Init+0x184>
 800033a:	d87c      	bhi.n	8000436 <HAL_GPIO_Init+0x132>
 800033c:	2d00      	cmp	r5, #0
 800033e:	f000 808e 	beq.w	800045e <HAL_GPIO_Init+0x15a>
 8000342:	2d01      	cmp	r5, #1
 8000344:	f000 809e 	beq.w	8000484 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000348:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034c:	2cff      	cmp	r4, #255	; 0xff
 800034e:	bf93      	iteet	ls
 8000350:	4682      	movls	sl, r0
 8000352:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000356:	3d08      	subhi	r5, #8
 8000358:	f8d0 b000 	ldrls.w	fp, [r0]
 800035c:	bf92      	itee	ls
 800035e:	00b5      	lslls	r5, r6, #2
 8000360:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000364:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000366:	fa09 f805 	lsl.w	r8, r9, r5
 800036a:	ea2b 0808 	bic.w	r8, fp, r8
 800036e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000372:	bf88      	it	hi
 8000374:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000378:	ea48 0505 	orr.w	r5, r8, r5
 800037c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000380:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000384:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000388:	d04e      	beq.n	8000428 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4d47      	ldr	r5, [pc, #284]	; (80004a8 <HAL_GPIO_Init+0x1a4>)
 800038c:	4f46      	ldr	r7, [pc, #280]	; (80004a8 <HAL_GPIO_Init+0x1a4>)
 800038e:	69ad      	ldr	r5, [r5, #24]
 8000390:	f026 0803 	bic.w	r8, r6, #3
 8000394:	f045 0501 	orr.w	r5, r5, #1
 8000398:	61bd      	str	r5, [r7, #24]
 800039a:	69bd      	ldr	r5, [r7, #24]
 800039c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003a0:	f005 0501 	and.w	r5, r5, #1
 80003a4:	9501      	str	r5, [sp, #4]
 80003a6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003aa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003b8:	fa09 f90b 	lsl.w	r9, r9, fp
 80003bc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003c0:	4d3a      	ldr	r5, [pc, #232]	; (80004ac <HAL_GPIO_Init+0x1a8>)
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	d068      	beq.n	8000498 <HAL_GPIO_Init+0x194>
 80003c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ca:	42a8      	cmp	r0, r5
 80003cc:	d066      	beq.n	800049c <HAL_GPIO_Init+0x198>
 80003ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003d2:	42a8      	cmp	r0, r5
 80003d4:	d064      	beq.n	80004a0 <HAL_GPIO_Init+0x19c>
 80003d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003da:	42a8      	cmp	r0, r5
 80003dc:	bf0c      	ite	eq
 80003de:	2503      	moveq	r5, #3
 80003e0:	2504      	movne	r5, #4
 80003e2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003e6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003ea:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ee:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003f0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003f4:	bf14      	ite	ne
 80003f6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003f8:	43a5      	biceq	r5, r4
 80003fa:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003fc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003fe:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000402:	bf14      	ite	ne
 8000404:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000406:	43a5      	biceq	r5, r4
 8000408:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800040a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800040c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000410:	bf14      	ite	ne
 8000412:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000414:	43a5      	biceq	r5, r4
 8000416:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000418:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800041a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800041e:	bf14      	ite	ne
 8000420:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000422:	ea25 0404 	biceq.w	r4, r5, r4
 8000426:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000428:	3601      	adds	r6, #1
 800042a:	2e10      	cmp	r6, #16
 800042c:	f47f af73 	bne.w	8000316 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000430:	b003      	add	sp, #12
 8000432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000436:	2d03      	cmp	r5, #3
 8000438:	d022      	beq.n	8000480 <HAL_GPIO_Init+0x17c>
 800043a:	2d11      	cmp	r5, #17
 800043c:	d184      	bne.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800043e:	68ca      	ldr	r2, [r1, #12]
 8000440:	3204      	adds	r2, #4
          break;
 8000442:	e781      	b.n	8000348 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000444:	4f1a      	ldr	r7, [pc, #104]	; (80004b0 <HAL_GPIO_Init+0x1ac>)
 8000446:	42bd      	cmp	r5, r7
 8000448:	d009      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 800044a:	d812      	bhi.n	8000472 <HAL_GPIO_Init+0x16e>
 800044c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004bc <HAL_GPIO_Init+0x1b8>
 8000450:	454d      	cmp	r5, r9
 8000452:	d004      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 8000454:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000458:	454d      	cmp	r5, r9
 800045a:	f47f af75 	bne.w	8000348 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800045e:	688a      	ldr	r2, [r1, #8]
 8000460:	b1c2      	cbz	r2, 8000494 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000462:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000464:	bf0c      	ite	eq
 8000466:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800046a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800046e:	2208      	movs	r2, #8
 8000470:	e76a      	b.n	8000348 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000472:	4575      	cmp	r5, lr
 8000474:	d0f3      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 8000476:	4565      	cmp	r5, ip
 8000478:	d0f1      	beq.n	800045e <HAL_GPIO_Init+0x15a>
 800047a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004c0 <HAL_GPIO_Init+0x1bc>
 800047e:	e7eb      	b.n	8000458 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000480:	2200      	movs	r2, #0
 8000482:	e761      	b.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000484:	68ca      	ldr	r2, [r1, #12]
          break;
 8000486:	e75f      	b.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000488:	68ca      	ldr	r2, [r1, #12]
 800048a:	3208      	adds	r2, #8
          break;
 800048c:	e75c      	b.n	8000348 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800048e:	68ca      	ldr	r2, [r1, #12]
 8000490:	320c      	adds	r2, #12
          break;
 8000492:	e759      	b.n	8000348 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000494:	2204      	movs	r2, #4
 8000496:	e757      	b.n	8000348 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000498:	2500      	movs	r5, #0
 800049a:	e7a2      	b.n	80003e2 <HAL_GPIO_Init+0xde>
 800049c:	2501      	movs	r5, #1
 800049e:	e7a0      	b.n	80003e2 <HAL_GPIO_Init+0xde>
 80004a0:	2502      	movs	r5, #2
 80004a2:	e79e      	b.n	80003e2 <HAL_GPIO_Init+0xde>
 80004a4:	40010400 	.word	0x40010400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	10210000 	.word	0x10210000
 80004b4:	10310000 	.word	0x10310000
 80004b8:	10320000 	.word	0x10320000
 80004bc:	10110000 	.word	0x10110000
 80004c0:	10220000 	.word	0x10220000

080004c4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004c4:	6802      	ldr	r2, [r0, #0]
 80004c6:	6953      	ldr	r3, [r2, #20]
 80004c8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80004cc:	d00d      	beq.n	80004ea <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004ce:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004d2:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004d4:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80004d6:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004d8:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80004da:	2300      	movs	r3, #0
 80004dc:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80004e2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80004e6:	2001      	movs	r0, #1
 80004e8:	4770      	bx	lr
  }
  return HAL_OK;
 80004ea:	4618      	mov	r0, r3
}
 80004ec:	4770      	bx	lr

080004ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004f2:	4604      	mov	r4, r0
 80004f4:	4617      	mov	r7, r2
 80004f6:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004f8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004fc:	b28e      	uxth	r6, r1
 80004fe:	6825      	ldr	r5, [r4, #0]
 8000500:	f1b8 0f01 	cmp.w	r8, #1
 8000504:	bf0c      	ite	eq
 8000506:	696b      	ldreq	r3, [r5, #20]
 8000508:	69ab      	ldrne	r3, [r5, #24]
 800050a:	ea36 0303 	bics.w	r3, r6, r3
 800050e:	bf14      	ite	ne
 8000510:	2001      	movne	r0, #1
 8000512:	2000      	moveq	r0, #0
 8000514:	b908      	cbnz	r0, 800051a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800051a:	696b      	ldr	r3, [r5, #20]
 800051c:	055a      	lsls	r2, r3, #21
 800051e:	d512      	bpl.n	8000546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000520:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000522:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000528:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800052a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800052e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000530:	2304      	movs	r3, #4
 8000532:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000534:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000536:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000538:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800053a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800053e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000546:	1c7b      	adds	r3, r7, #1
 8000548:	d0d9      	beq.n	80004fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800054a:	b94f      	cbnz	r7, 8000560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800054c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800054e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000550:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000552:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000556:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800055a:	2003      	movs	r0, #3
 800055c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000560:	f7ff fe3e 	bl	80001e0 <HAL_GetTick>
 8000564:	eba0 0009 	sub.w	r0, r0, r9
 8000568:	4287      	cmp	r7, r0
 800056a:	d2c8      	bcs.n	80004fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800056c:	e7ee      	b.n	800054c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800056e <I2C_WaitOnFlagUntilTimeout>:
{
 800056e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000572:	4604      	mov	r4, r0
 8000574:	4690      	mov	r8, r2
 8000576:	461f      	mov	r7, r3
 8000578:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800057a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800057e:	b28d      	uxth	r5, r1
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	f1b9 0f01 	cmp.w	r9, #1
 8000586:	bf0c      	ite	eq
 8000588:	695b      	ldreq	r3, [r3, #20]
 800058a:	699b      	ldrne	r3, [r3, #24]
 800058c:	ea35 0303 	bics.w	r3, r5, r3
 8000590:	bf0c      	ite	eq
 8000592:	2301      	moveq	r3, #1
 8000594:	2300      	movne	r3, #0
 8000596:	4543      	cmp	r3, r8
 8000598:	d002      	beq.n	80005a0 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800059a:	2000      	movs	r0, #0
}
 800059c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80005a0:	1c7b      	adds	r3, r7, #1
 80005a2:	d0ed      	beq.n	8000580 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005a4:	b95f      	cbnz	r7, 80005be <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80005a6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80005a8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80005aa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80005b4:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80005b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80005ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005be:	f7ff fe0f 	bl	80001e0 <HAL_GetTick>
 80005c2:	1b80      	subs	r0, r0, r6
 80005c4:	4287      	cmp	r7, r0
 80005c6:	d2db      	bcs.n	8000580 <I2C_WaitOnFlagUntilTimeout+0x12>
 80005c8:	e7ed      	b.n	80005a6 <I2C_WaitOnFlagUntilTimeout+0x38>

080005ca <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80005ca:	b570      	push	{r4, r5, r6, lr}
 80005cc:	4604      	mov	r4, r0
 80005ce:	460d      	mov	r5, r1
 80005d0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	061b      	lsls	r3, r3, #24
 80005d8:	d501      	bpl.n	80005de <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80005da:	2000      	movs	r0, #0
 80005dc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80005de:	4620      	mov	r0, r4
 80005e0:	f7ff ff70 	bl	80004c4 <I2C_IsAcknowledgeFailed>
 80005e4:	b9a8      	cbnz	r0, 8000612 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005e6:	1c6a      	adds	r2, r5, #1
 80005e8:	d0f3      	beq.n	80005d2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005ea:	b965      	cbnz	r5, 8000606 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005ee:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005f6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005f8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005fa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000600:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000604:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000606:	f7ff fdeb 	bl	80001e0 <HAL_GetTick>
 800060a:	1b80      	subs	r0, r0, r6
 800060c:	4285      	cmp	r5, r0
 800060e:	d2e0      	bcs.n	80005d2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000610:	e7ec      	b.n	80005ec <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
}
 8000614:	bd70      	pop	{r4, r5, r6, pc}

08000616 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000616:	b570      	push	{r4, r5, r6, lr}
 8000618:	4604      	mov	r4, r0
 800061a:	460d      	mov	r5, r1
 800061c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800061e:	6823      	ldr	r3, [r4, #0]
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	075b      	lsls	r3, r3, #29
 8000624:	d501      	bpl.n	800062a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000626:	2000      	movs	r0, #0
 8000628:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800062a:	4620      	mov	r0, r4
 800062c:	f7ff ff4a 	bl	80004c4 <I2C_IsAcknowledgeFailed>
 8000630:	b9a8      	cbnz	r0, 800065e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000632:	1c6a      	adds	r2, r5, #1
 8000634:	d0f3      	beq.n	800061e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000636:	b965      	cbnz	r5, 8000652 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000638:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800063a:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000642:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000644:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000646:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000648:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800064c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000650:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000652:	f7ff fdc5 	bl	80001e0 <HAL_GetTick>
 8000656:	1b80      	subs	r0, r0, r6
 8000658:	4285      	cmp	r5, r0
 800065a:	d2e0      	bcs.n	800061e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800065c:	e7ec      	b.n	8000638 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800065e:	2001      	movs	r0, #1
}
 8000660:	bd70      	pop	{r4, r5, r6, pc}
	...

08000664 <HAL_I2C_Init>:
{
 8000664:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8000666:	4604      	mov	r4, r0
 8000668:	b908      	cbnz	r0, 800066e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800066a:	2001      	movs	r0, #1
 800066c:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800066e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000676:	b91b      	cbnz	r3, 8000680 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000678:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800067c:	f002 fab6 	bl	8002bec <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000680:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000682:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000684:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000688:	6813      	ldr	r3, [r2, #0]
 800068a:	f023 0301 	bic.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000690:	f000 ff9a 	bl	80015c8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000694:	6863      	ldr	r3, [r4, #4]
 8000696:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <HAL_I2C_Init+0xf0>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d830      	bhi.n	80006fe <HAL_I2C_Init+0x9a>
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <HAL_I2C_Init+0xf4>)
 800069e:	4290      	cmp	r0, r2
 80006a0:	d9e3      	bls.n	800066a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80006a2:	4a2e      	ldr	r2, [pc, #184]	; (800075c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 80006a4:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80006a6:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80006aa:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006ac:	3201      	adds	r2, #1
 80006ae:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80006b0:	4a28      	ldr	r2, [pc, #160]	; (8000754 <HAL_I2C_Init+0xf0>)
 80006b2:	3801      	subs	r0, #1
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d832      	bhi.n	800071e <HAL_I2C_Init+0xba>
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80006be:	1c43      	adds	r3, r0, #1
 80006c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	bf38      	it	cc
 80006c8:	2304      	movcc	r3, #4
 80006ca:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006cc:	6a22      	ldr	r2, [r4, #32]
 80006ce:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006d0:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006d2:	4313      	orrs	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80006d6:	68e2      	ldr	r2, [r4, #12]
 80006d8:	6923      	ldr	r3, [r4, #16]
 80006da:	4313      	orrs	r3, r2
 80006dc:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80006de:	69a2      	ldr	r2, [r4, #24]
 80006e0:	6963      	ldr	r3, [r4, #20]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80006e6:	680b      	ldr	r3, [r1, #0]
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80006ee:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006f0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80006f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80006f6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80006f8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80006fc:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <HAL_I2C_Init+0xfc>)
 8000700:	4290      	cmp	r0, r2
 8000702:	d9b2      	bls.n	800066a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000704:	4d15      	ldr	r5, [pc, #84]	; (800075c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000706:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800070a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800070e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000710:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000712:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000714:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000718:	fbb2 f2f5 	udiv	r2, r2, r5
 800071c:	e7c6      	b.n	80006ac <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800071e:	68a2      	ldr	r2, [r4, #8]
 8000720:	b952      	cbnz	r2, 8000738 <HAL_I2C_Init+0xd4>
 8000722:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000726:	fbb0 f0f3 	udiv	r0, r0, r3
 800072a:	1c43      	adds	r3, r0, #1
 800072c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000730:	b16b      	cbz	r3, 800074e <HAL_I2C_Init+0xea>
 8000732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000736:	e7c8      	b.n	80006ca <HAL_I2C_Init+0x66>
 8000738:	2219      	movs	r2, #25
 800073a:	4353      	muls	r3, r2
 800073c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000740:	1c43      	adds	r3, r0, #1
 8000742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000746:	b113      	cbz	r3, 800074e <HAL_I2C_Init+0xea>
 8000748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074c:	e7bd      	b.n	80006ca <HAL_I2C_Init+0x66>
 800074e:	2301      	movs	r3, #1
 8000750:	e7bb      	b.n	80006ca <HAL_I2C_Init+0x66>
 8000752:	bf00      	nop
 8000754:	000186a0 	.word	0x000186a0
 8000758:	001e847f 	.word	0x001e847f
 800075c:	000f4240 	.word	0x000f4240
 8000760:	003d08ff 	.word	0x003d08ff

08000764 <HAL_I2C_Master_Transmit>:
{
 8000764:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000768:	4604      	mov	r4, r0
 800076a:	461f      	mov	r7, r3
 800076c:	460d      	mov	r5, r1
 800076e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000770:	f7ff fd36 	bl	80001e0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000774:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000778:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800077a:	2b20      	cmp	r3, #32
 800077c:	d004      	beq.n	8000788 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800077e:	2502      	movs	r5, #2
}
 8000780:	4628      	mov	r0, r5
 8000782:	b004      	add	sp, #16
 8000784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000788:	9000      	str	r0, [sp, #0]
 800078a:	2319      	movs	r3, #25
 800078c:	2201      	movs	r2, #1
 800078e:	495d      	ldr	r1, [pc, #372]	; (8000904 <HAL_I2C_Master_Transmit+0x1a0>)
 8000790:	4620      	mov	r0, r4
 8000792:	f7ff feec 	bl	800056e <I2C_WaitOnFlagUntilTimeout>
 8000796:	2800      	cmp	r0, #0
 8000798:	d1f1      	bne.n	800077e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800079a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d0ed      	beq.n	800077e <HAL_I2C_Master_Transmit+0x1a>
 80007a2:	2301      	movs	r3, #1
 80007a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80007ae:	bf5e      	ittt	pl
 80007b0:	681a      	ldrpl	r2, [r3, #0]
 80007b2:	f042 0201 	orrpl.w	r2, r2, #1
 80007b6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007be:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80007c0:	2221      	movs	r2, #33	; 0x21
 80007c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80007c6:	2210      	movs	r2, #16
 80007c8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007cc:	2200      	movs	r2, #0
 80007ce:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80007d0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80007d4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80007d6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80007d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80007da:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80007de:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80007e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80007e2:	2a04      	cmp	r2, #4
 80007e4:	d004      	beq.n	80007f0 <HAL_I2C_Master_Transmit+0x8c>
 80007e6:	2a01      	cmp	r2, #1
 80007e8:	d002      	beq.n	80007f0 <HAL_I2C_Master_Transmit+0x8c>
 80007ea:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80007ee:	d104      	bne.n	80007fa <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e002      	b.n	8000800 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80007fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80007fc:	2a12      	cmp	r2, #18
 80007fe:	d0f7      	beq.n	80007f0 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000800:	9600      	str	r6, [sp, #0]
 8000802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000804:	2200      	movs	r2, #0
 8000806:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff feaf 	bl	800056e <I2C_WaitOnFlagUntilTimeout>
 8000810:	bb28      	cbnz	r0, 800085e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000812:	6923      	ldr	r3, [r4, #16]
 8000814:	6822      	ldr	r2, [r4, #0]
 8000816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800081a:	d112      	bne.n	8000842 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800081c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000820:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000822:	4633      	mov	r3, r6
 8000824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000826:	4938      	ldr	r1, [pc, #224]	; (8000908 <HAL_I2C_Master_Transmit+0x1a4>)
 8000828:	4620      	mov	r0, r4
 800082a:	f7ff fe60 	bl	80004ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800082e:	4605      	mov	r5, r0
 8000830:	b9a0      	cbnz	r0, 800085c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	9003      	str	r0, [sp, #12]
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	9203      	str	r2, [sp, #12]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	9303      	str	r3, [sp, #12]
 800083e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000840:	e050      	b.n	80008e4 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000842:	11eb      	asrs	r3, r5, #7
 8000844:	f003 0306 	and.w	r3, r3, #6
 8000848:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800084c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800084e:	492f      	ldr	r1, [pc, #188]	; (800090c <HAL_I2C_Master_Transmit+0x1a8>)
 8000850:	4633      	mov	r3, r6
 8000852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000854:	4620      	mov	r0, r4
 8000856:	f7ff fe4a 	bl	80004ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800085a:	b148      	cbz	r0, 8000870 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800085c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800085e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000860:	2b04      	cmp	r3, #4
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	d107      	bne.n	8000878 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000868:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800086c:	2501      	movs	r5, #1
 800086e:	e787      	b.n	8000780 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	b2ed      	uxtb	r5, r5
 8000874:	611d      	str	r5, [r3, #16]
 8000876:	e7d4      	b.n	8000822 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000878:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800087c:	2503      	movs	r5, #3
 800087e:	e77f      	b.n	8000780 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000880:	4632      	mov	r2, r6
 8000882:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff fea0 	bl	80005ca <I2C_WaitOnTXEFlagUntilTimeout>
 800088a:	b140      	cbz	r0, 800089e <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800088c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800088e:	2b04      	cmp	r3, #4
 8000890:	d1f4      	bne.n	800087c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000892:	6822      	ldr	r2, [r4, #0]
 8000894:	6813      	ldr	r3, [r2, #0]
 8000896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	e7e6      	b.n	800086c <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800089e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008a0:	6820      	ldr	r0, [r4, #0]
 80008a2:	1c4b      	adds	r3, r1, #1
 80008a4:	6263      	str	r3, [r4, #36]	; 0x24
 80008a6:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80008a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008aa:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80008ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80008ae:	3b01      	subs	r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80008b4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80008b6:	1e53      	subs	r3, r2, #1
 80008b8:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80008ba:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80008bc:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80008be:	d50a      	bpl.n	80008d6 <HAL_I2C_Master_Transmit+0x172>
 80008c0:	b14b      	cbz	r3, 80008d6 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008c2:	1c8b      	adds	r3, r1, #2
 80008c4:	6263      	str	r3, [r4, #36]	; 0x24
 80008c6:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80008c8:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008ca:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80008cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80008ce:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008d6:	4632      	mov	r2, r6
 80008d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008da:	4620      	mov	r0, r4
 80008dc:	f7ff fe9b 	bl	8000616 <I2C_WaitOnBTFFlagUntilTimeout>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d1d3      	bne.n	800088c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80008e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1ca      	bne.n	8000880 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80008ea:	6821      	ldr	r1, [r4, #0]
 80008ec:	680a      	ldr	r2, [r1, #0]
 80008ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008f2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80008f4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80008f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80008fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000902:	e73d      	b.n	8000780 <HAL_I2C_Master_Transmit+0x1c>
 8000904:	00100002 	.word	0x00100002
 8000908:	00010002 	.word	0x00010002
 800090c:	00010008 	.word	0x00010008

08000910 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000914:	4604      	mov	r4, r0
{
 8000916:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000918:	2800      	cmp	r0, #0
 800091a:	d060      	beq.n	80009de <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800091c:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000920:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000924:	b91b      	cbnz	r3, 800092e <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000926:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800092a:	f002 fa15 	bl	8002d58 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800092e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000930:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000932:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000934:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000938:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 800093c:	f000 fedc 	bl	80016f8 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	f104 0804 	add.w	r8, r4, #4
 800094a:	6033      	str	r3, [r6, #0]
 800094c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000950:	6820      	ldr	r0, [r4, #0]
 8000952:	f000 fec1 	bl	80016d8 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000956:	2100      	movs	r1, #0
 8000958:	6820      	ldr	r0, [r4, #0]
 800095a:	f000 fed7 	bl	800170c <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 800095e:	2100      	movs	r1, #0
 8000960:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000962:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000964:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000966:	4608      	mov	r0, r1
 8000968:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 800096c:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000970:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000972:	3101      	adds	r1, #1
 8000974:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000976:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800097a:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 800097e:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000980:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000982:	6410      	str	r0, [r2, #64]	; 0x40
 8000984:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000988:	d1f0      	bne.n	800096c <HAL_PCD_Init+0x5c>
 800098a:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800098c:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 800098e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000992:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000994:	3201      	adds	r2, #1
 8000996:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000998:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800099c:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 80009a0:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80009a4:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 80009a8:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 80009ac:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 80009b0:	d1ed      	bne.n	800098e <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80009b2:	466e      	mov	r6, sp
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	6033      	str	r3, [r6, #0]
 80009bc:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80009c0:	6820      	ldr	r0, [r4, #0]
 80009c2:	f000 fea5 	bl	8001710 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80009c6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80009c8:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80009cc:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80009ce:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80009d2:	f001 f975 	bl	8001cc0 <USB_DevDisconnect>
  return HAL_OK;
 80009d6:	2000      	movs	r0, #0
}
 80009d8:	b006      	add	sp, #24
 80009da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80009de:	2001      	movs	r0, #1
 80009e0:	e7fa      	b.n	80009d8 <HAL_PCD_Init+0xc8>

080009e2 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80009e2:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80009e6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80009e8:	2b01      	cmp	r3, #1
{
 80009ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80009ec:	d00e      	beq.n	8000a0c <HAL_PCD_Start+0x2a>
 80009ee:	2101      	movs	r1, #1
 80009f0:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80009f4:	f002 fadd 	bl	8002fb2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80009f8:	6820      	ldr	r0, [r4, #0]
 80009fa:	f001 f95f 	bl	8001cbc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009fe:	6820      	ldr	r0, [r4, #0]
 8000a00:	f000 fe71 	bl	80016e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000a0a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a0c:	2002      	movs	r0, #2
}
 8000a0e:	bd10      	pop	{r4, pc}

08000a10 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000a10:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000a14:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000a16:	2a01      	cmp	r2, #1
{
 8000a18:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a1a:	d00b      	beq.n	8000a34 <HAL_PCD_SetAddress+0x24>
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000a22:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000a26:	6800      	ldr	r0, [r0, #0]
 8000a28:	f001 f942 	bl	8001cb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000a32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a34:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000a38:	b538      	push	{r3, r4, r5, lr}
 8000a3a:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000a3c:	b248      	sxtb	r0, r1
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a44:	bfb5      	itete	lt
 8000a46:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a4a:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a4e:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a50:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a54:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000a56:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a58:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000a5a:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000a5c:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000a60:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d009      	beq.n	8000a7a <HAL_PCD_EP_Open+0x42>
 8000a66:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000a68:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000a6a:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000a6e:	f000 fe6b 	bl	8001748 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000a78:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000a7a:	2002      	movs	r0, #2
}
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}

08000a7e <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000a7e:	b24b      	sxtb	r3, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a86:	bfb5      	itete	lt
 8000a88:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a8c:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000a90:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000a92:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a96:	0fdb      	lsrs	r3, r3, #31
{  
 8000a98:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000a9a:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a9c:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000a9e:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000aa2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d009      	beq.n	8000abc <HAL_PCD_EP_Close+0x3e>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000aae:	6800      	ldr	r0, [r0, #0]
 8000ab0:	f000 ffbc 	bl	8001a2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000aba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000abc:	2002      	movs	r0, #2
}
 8000abe:	bd10      	pop	{r4, pc}

08000ac0 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000ac8:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000aca:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000acc:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ad0:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000ad4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000ad6:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000ada:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000ade:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000ae2:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000ae6:	6800      	ldr	r0, [r0, #0]
 8000ae8:	f001 f904 	bl	8001cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000aec:	4630      	mov	r0, r6
 8000aee:	bd70      	pop	{r4, r5, r6, pc}

08000af0 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000af0:	f001 010f 	and.w	r1, r1, #15
 8000af4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000af8:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000afc:	4770      	bx	lr

08000afe <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000afe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000b02:	b570      	push	{r4, r5, r6, lr}
 8000b04:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000b06:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000b08:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000b0a:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000b0c:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000b0e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000b12:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b16:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000b18:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000b1a:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000b1c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000b20:	6800      	ldr	r0, [r0, #0]
 8000b22:	f001 f8e7 	bl	8001cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000b26:	4630      	mov	r0, r6
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b2c <HAL_PCD_IRQHandler>:
{ 
 8000b2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000b32:	6800      	ldr	r0, [r0, #0]
 8000b34:	f001 f8c6 	bl	8001cc4 <USB_ReadInterrupts>
 8000b38:	0400      	lsls	r0, r0, #16
 8000b3a:	f100 8098 	bmi.w	8000c6e <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000b3e:	6820      	ldr	r0, [r4, #0]
 8000b40:	f001 f8c0 	bl	8001cc4 <USB_ReadInterrupts>
 8000b44:	0541      	lsls	r1, r0, #21
 8000b46:	d50f      	bpl.n	8000b68 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b48:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000b4a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b4c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	0c1b      	lsrs	r3, r3, #16
 8000b58:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000b5c:	f002 f933 	bl	8002dc6 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000b60:	2100      	movs	r1, #0
 8000b62:	4620      	mov	r0, r4
 8000b64:	f7ff ff54 	bl	8000a10 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000b68:	6820      	ldr	r0, [r4, #0]
 8000b6a:	f001 f8ab 	bl	8001cc4 <USB_ReadInterrupts>
 8000b6e:	0447      	lsls	r7, r0, #17
 8000b70:	d508      	bpl.n	8000b84 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000b72:	6822      	ldr	r2, [r4, #0]
 8000b74:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b7c:	041b      	lsls	r3, r3, #16
 8000b7e:	0c1b      	lsrs	r3, r3, #16
 8000b80:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000b84:	6820      	ldr	r0, [r4, #0]
 8000b86:	f001 f89d 	bl	8001cc4 <USB_ReadInterrupts>
 8000b8a:	0486      	lsls	r6, r0, #18
 8000b8c:	d508      	bpl.n	8000ba0 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000b8e:	6822      	ldr	r2, [r4, #0]
 8000b90:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b98:	041b      	lsls	r3, r3, #16
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000ba0:	6820      	ldr	r0, [r4, #0]
 8000ba2:	f001 f88f 	bl	8001cc4 <USB_ReadInterrupts>
 8000ba6:	04c5      	lsls	r5, r0, #19
 8000ba8:	d51c      	bpl.n	8000be4 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000baa:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000bac:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000bae:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000bb2:	f023 0304 	bic.w	r3, r3, #4
 8000bb6:	041b      	lsls	r3, r3, #16
 8000bb8:	0c1b      	lsrs	r3, r3, #16
 8000bba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000bbe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000bc2:	f023 0308 	bic.w	r3, r3, #8
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	0c1b      	lsrs	r3, r3, #16
 8000bca:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000bce:	f002 f917 	bl	8002e00 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000bd2:	6822      	ldr	r2, [r4, #0]
 8000bd4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bdc:	041b      	lsls	r3, r3, #16
 8000bde:	0c1b      	lsrs	r3, r3, #16
 8000be0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000be4:	6820      	ldr	r0, [r4, #0]
 8000be6:	f001 f86d 	bl	8001cc4 <USB_ReadInterrupts>
 8000bea:	0500      	lsls	r0, r0, #20
 8000bec:	d51d      	bpl.n	8000c2a <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000bee:	6820      	ldr	r0, [r4, #0]
 8000bf0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000bfe:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c06:	041b      	lsls	r3, r3, #16
 8000c08:	0c1b      	lsrs	r3, r3, #16
 8000c0a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000c0e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000c1c:	f001 f852 	bl	8001cc4 <USB_ReadInterrupts>
 8000c20:	04c1      	lsls	r1, r0, #19
 8000c22:	d402      	bmi.n	8000c2a <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000c24:	4620      	mov	r0, r4
 8000c26:	f002 f8db 	bl	8002de0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000c2a:	6820      	ldr	r0, [r4, #0]
 8000c2c:	f001 f84a 	bl	8001cc4 <USB_ReadInterrupts>
 8000c30:	0582      	lsls	r2, r0, #22
 8000c32:	d50b      	bpl.n	8000c4c <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000c34:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000c36:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000c38:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c40:	041b      	lsls	r3, r3, #16
 8000c42:	0c1b      	lsrs	r3, r3, #16
 8000c44:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000c48:	f002 f8b9 	bl	8002dbe <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c4c:	6820      	ldr	r0, [r4, #0]
 8000c4e:	f001 f839 	bl	8001cc4 <USB_ReadInterrupts>
 8000c52:	05c3      	lsls	r3, r0, #23
 8000c54:	d508      	bpl.n	8000c68 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c56:	6822      	ldr	r2, [r4, #0]
 8000c58:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c60:	041b      	lsls	r3, r3, #16
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000c68:	b002      	add	sp, #8
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000c6e:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c70:	4fc8      	ldr	r7, [pc, #800]	; (8000f94 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c72:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000f98 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c76:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000f9c <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000c7a:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000c7e:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000c82:	6820      	ldr	r0, [r4, #0]
 8000c84:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000c8e:	041b      	lsls	r3, r3, #16
 8000c90:	f57f af55 	bpl.w	8000b3e <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000c94:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000c98:	f015 050f 	ands.w	r5, r5, #15
 8000c9c:	f040 80ab 	bne.w	8000df6 <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000ca0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ca4:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000ca6:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000caa:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000cac:	d126      	bne.n	8000cfc <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000cae:	403b      	ands	r3, r7
 8000cb0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cb2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000cb6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cc0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000cc4:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000cc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cce:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000cd0:	4413      	add	r3, r2
 8000cd2:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f002 f86b 	bl	8002db0 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000cda:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0cf      	beq.n	8000c82 <HAL_PCD_IRQHandler+0x156>
 8000ce2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	d1cc      	bne.n	8000c82 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000ce8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000cec:	6821      	ldr	r1, [r4, #0]
 8000cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000cf6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000cfa:	e7c2      	b.n	8000c82 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000cfc:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d04:	051a      	lsls	r2, r3, #20
 8000d06:	d51f      	bpl.n	8000d48 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d08:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d0c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d1e:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d26:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000d2a:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000d2e:	f001 f8e1 	bl	8001ef4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000d32:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d34:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000d36:	8813      	ldrh	r3, [r2, #0]
 8000d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d3c:	051b      	lsls	r3, r3, #20
 8000d3e:	0d1b      	lsrs	r3, r3, #20
 8000d40:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d42:	f002 f827 	bl	8002d94 <HAL_PCD_SetupStageCallback>
 8000d46:	e79c      	b.n	8000c82 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d4c:	041b      	lsls	r3, r3, #16
 8000d4e:	d598      	bpl.n	8000c82 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d50:	8803      	ldrh	r3, [r0, #0]
 8000d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d56:	051b      	lsls	r3, r3, #20
 8000d58:	0d1b      	lsrs	r3, r3, #20
 8000d5a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d60:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d6e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d76:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000d7a:	b163      	cbz	r3, 8000d96 <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000d7c:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000d80:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000d84:	f001 f8b6 	bl	8001ef4 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000d88:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000d8c:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000d90:	4413      	add	r3, r2
 8000d92:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000d96:	2100      	movs	r1, #0
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f002 f801 	bl	8002da0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d9e:	6822      	ldr	r2, [r4, #0]
 8000da0:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000da4:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000da8:	2d3e      	cmp	r5, #62	; 0x3e
 8000daa:	b289      	uxth	r1, r1
 8000dac:	f101 0106 	add.w	r1, r1, #6
 8000db0:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000db4:	d917      	bls.n	8000de6 <HAL_PCD_IRQHandler+0x2ba>
 8000db6:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000dba:	06ee      	lsls	r6, r5, #27
 8000dbc:	bf04      	itt	eq
 8000dbe:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000dc2:	b29b      	uxtheq	r3, r3
 8000dc4:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000dce:	8813      	ldrh	r3, [r2, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	ea03 0308 	and.w	r3, r3, r8
 8000dd6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de2:	8013      	strh	r3, [r2, #0]
 8000de4:	e74d      	b.n	8000c82 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000de6:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000dea:	07ed      	lsls	r5, r5, #31
 8000dec:	bf44      	itt	mi
 8000dee:	3301      	addmi	r3, #1
 8000df0:	b29b      	uxthmi	r3, r3
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	e7e8      	b.n	8000dc8 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000df6:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e04:	0419      	lsls	r1, r3, #16
 8000e06:	d53f      	bpl.n	8000e88 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e08:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e0c:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e14:	051b      	lsls	r3, r3, #20
 8000e16:	0d1b      	lsrs	r3, r3, #20
 8000e18:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e1c:	eb04 010a 	add.w	r1, r4, sl
 8000e20:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d174      	bne.n	8000f12 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e28:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e2c:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3306      	adds	r3, #6
 8000e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e3c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000e40:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000e44:	b136      	cbz	r6, 8000e54 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000e46:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000e4a:	4633      	mov	r3, r6
 8000e4c:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000e50:	f001 f850 	bl	8001ef4 <USB_ReadPMA>
 8000e54:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000e58:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000e5c:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000e60:	4433      	add	r3, r6
 8000e62:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e66:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000e6a:	4432      	add	r2, r6
 8000e6c:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e70:	b123      	cbz	r3, 8000e7c <HAL_PCD_IRQHandler+0x350>
 8000e72:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000e76:	4286      	cmp	r6, r0
 8000e78:	f080 8086 	bcs.w	8000f88 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000e7c:	44a2      	add	sl, r4
 8000e7e:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000e82:	4620      	mov	r0, r4
 8000e84:	f001 ff8c 	bl	8002da0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e8c:	061a      	lsls	r2, r3, #24
 8000e8e:	f57f aef8 	bpl.w	8000c82 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e92:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000e94:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e96:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000e9a:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	403b      	ands	r3, r7
 8000ea0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000ea4:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000ea8:	3502      	adds	r5, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d178      	bne.n	8000fa0 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000eb2:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	3302      	adds	r3, #2
 8000eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ebe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ec2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000ec6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ece:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000ed0:	b11b      	cbz	r3, 8000eda <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000ed2:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000ed4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000ed6:	f000 fefb 	bl	8001cd0 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eda:	6822      	ldr	r2, [r4, #0]
 8000edc:	4426      	add	r6, r4
 8000ede:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000ee2:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000eee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ef2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000ef6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ef8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000efc:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000efe:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000f00:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000f02:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f04:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8085 	bne.w	8001016 <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f0c:	f001 ff50 	bl	8002db0 <HAL_PCD_DataInStageCallback>
 8000f10:	e6b7      	b.n	8000c82 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f12:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000f16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f20:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f24:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000f26:	d021      	beq.n	8000f6c <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f28:	3202      	adds	r2, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f30:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000f34:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000f38:	b136      	cbz	r6, 8000f48 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f3a:	4633      	mov	r3, r6
 8000f3c:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f40:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000f44:	f000 ffd6 	bl	8001ef4 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000f48:	eb04 030a 	add.w	r3, r4, sl
 8000f4c:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f5a:	051b      	lsls	r3, r3, #20
 8000f5c:	0d1b      	lsrs	r3, r3, #20
 8000f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f66:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000f6a:	e773      	b.n	8000e54 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f6c:	3206      	adds	r2, #6
 8000f6e:	4413      	add	r3, r2
 8000f70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f74:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000f78:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	d0e3      	beq.n	8000f48 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f80:	4633      	mov	r3, r6
 8000f82:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000f86:	e7db      	b.n	8000f40 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000f88:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff fd97 	bl	8000ac0 <HAL_PCD_EP_Receive>
 8000f92:	e779      	b.n	8000e88 <HAL_PCD_IRQHandler+0x35c>
 8000f94:	ffff8f0f 	.word	0xffff8f0f
 8000f98:	ffffbf8f 	.word	0xffffbf8f
 8000f9c:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000fa0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000fa4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fae:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000fb2:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000fb4:	d020      	beq.n	8000ff8 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fb6:	3202      	adds	r2, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fbe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000fc2:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fca:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000fcc:	b11b      	cbz	r3, 8000fd6 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000fce:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000fd0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000fd2:	f000 fe7d 	bl	8001cd0 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000fd6:	19a3      	adds	r3, r4, r6
 8000fd8:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fe6:	051b      	lsls	r3, r3, #20
 8000fe8:	0d1b      	lsrs	r3, r3, #20
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000ff6:	e770      	b.n	8000eda <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ff8:	3206      	adds	r2, #6
 8000ffa:	4413      	add	r3, r2
 8000ffc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001000:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001004:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800100c:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e1      	beq.n	8000fd6 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001012:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001014:	e7dc      	b.n	8000fd0 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001016:	f7ff fd72 	bl	8000afe <HAL_PCD_EP_Transmit>
 800101a:	e632      	b.n	8000c82 <HAL_PCD_IRQHandler+0x156>

0800101c <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 800101c:	2201      	movs	r2, #1
{
 800101e:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001020:	b24b      	sxtb	r3, r1
 8001022:	2b00      	cmp	r3, #0
 8001024:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001028:	bfb5      	itete	lt
 800102a:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 800102e:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001032:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001034:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001038:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 800103a:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 800103c:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 800103e:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001040:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001042:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001046:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001048:	4293      	cmp	r3, r2
 800104a:	d00e      	beq.n	800106a <HAL_PCD_EP_SetStall+0x4e>
 800104c:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001050:	6800      	ldr	r0, [r0, #0]
 8001052:	f000 fdb9 	bl	8001bc8 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001056:	b925      	cbnz	r5, 8001062 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001058:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 800105c:	6820      	ldr	r0, [r4, #0]
 800105e:	f000 fe35 	bl	8001ccc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001062:	2000      	movs	r0, #0
 8001064:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001068:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800106a:	2002      	movs	r0, #2
}
 800106c:	bd38      	pop	{r3, r4, r5, pc}

0800106e <HAL_PCD_EP_ClrStall>:
{
 800106e:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001070:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8001072:	b24b      	sxtb	r3, r1
 8001074:	2b00      	cmp	r3, #0
 8001076:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800107a:	bfb5      	itete	lt
 800107c:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001080:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001084:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001086:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800108a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800108c:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 800108e:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001090:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001092:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001096:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001098:	2b01      	cmp	r3, #1
 800109a:	d009      	beq.n	80010b0 <HAL_PCD_EP_ClrStall+0x42>
 800109c:	2301      	movs	r3, #1
 800109e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 80010a2:	6800      	ldr	r0, [r0, #0]
 80010a4:	f000 fdc2 	bl	8001c2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80010a8:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 80010ac:	4620      	mov	r0, r4
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80010b0:	2002      	movs	r0, #2
}
 80010b2:	bd38      	pop	{r3, r4, r5, pc}

080010b4 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 80010b4:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010b8:	bf1b      	ittet	ne
 80010ba:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80010be:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80010c2:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010c6:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80010c8:	bf08      	it	eq
 80010ca:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80010ce:	b91a      	cbnz	r2, 80010d8 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80010d0:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80010d2:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 80010d4:	2000      	movs	r0, #0
 80010d6:	4770      	bx	lr
    ep->doublebuffer = 1U;
 80010d8:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80010da:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80010dc:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80010de:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80010e0:	8103      	strh	r3, [r0, #8]
 80010e2:	e7f7      	b.n	80010d4 <HAL_PCDEx_PMAConfig+0x20>

080010e4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e4:	6803      	ldr	r3, [r0, #0]
{
 80010e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	07db      	lsls	r3, r3, #31
{
 80010ec:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	d410      	bmi.n	8001112 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	079f      	lsls	r7, r3, #30
 80010f4:	d45e      	bmi.n	80011b4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	0719      	lsls	r1, r3, #28
 80010fa:	f100 8095 	bmi.w	8001228 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	075a      	lsls	r2, r3, #29
 8001102:	f100 80bf 	bmi.w	8001284 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001106:	69ea      	ldr	r2, [r5, #28]
 8001108:	2a00      	cmp	r2, #0
 800110a:	f040 812d 	bne.w	8001368 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800110e:	2000      	movs	r0, #0
 8001110:	e014      	b.n	800113c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001112:	4c90      	ldr	r4, [pc, #576]	; (8001354 <HAL_RCC_OscConfig+0x270>)
 8001114:	6863      	ldr	r3, [r4, #4]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b04      	cmp	r3, #4
 800111c:	d007      	beq.n	800112e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d10c      	bne.n	8001142 <HAL_RCC_OscConfig+0x5e>
 8001128:	6863      	ldr	r3, [r4, #4]
 800112a:	03de      	lsls	r6, r3, #15
 800112c:	d509      	bpl.n	8001142 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	039c      	lsls	r4, r3, #14
 8001132:	d5dd      	bpl.n	80010f0 <HAL_RCC_OscConfig+0xc>
 8001134:	686b      	ldr	r3, [r5, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1da      	bne.n	80010f0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800113a:	2001      	movs	r0, #1
}
 800113c:	b002      	add	sp, #8
 800113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	686b      	ldr	r3, [r5, #4]
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001148:	d110      	bne.n	800116c <HAL_RCC_OscConfig+0x88>
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001152:	f7ff f845 	bl	80001e0 <HAL_GetTick>
 8001156:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	0398      	lsls	r0, r3, #14
 800115c:	d4c8      	bmi.n	80010f0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115e:	f7ff f83f 	bl	80001e0 <HAL_GetTick>
 8001162:	1b80      	subs	r0, r0, r6
 8001164:	2864      	cmp	r0, #100	; 0x64
 8001166:	d9f7      	bls.n	8001158 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001168:	2003      	movs	r0, #3
 800116a:	e7e7      	b.n	800113c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116c:	b99b      	cbnz	r3, 8001196 <HAL_RCC_OscConfig+0xb2>
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800117e:	f7ff f82f 	bl	80001e0 <HAL_GetTick>
 8001182:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	0399      	lsls	r1, r3, #14
 8001188:	d5b2      	bpl.n	80010f0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118a:	f7ff f829 	bl	80001e0 <HAL_GetTick>
 800118e:	1b80      	subs	r0, r0, r6
 8001190:	2864      	cmp	r0, #100	; 0x64
 8001192:	d9f7      	bls.n	8001184 <HAL_RCC_OscConfig+0xa0>
 8001194:	e7e8      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	d103      	bne.n	80011a6 <HAL_RCC_OscConfig+0xc2>
 800119e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a2:	6023      	str	r3, [r4, #0]
 80011a4:	e7d1      	b.n	800114a <HAL_RCC_OscConfig+0x66>
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011aa:	6023      	str	r3, [r4, #0]
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	e7cd      	b.n	8001150 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011b4:	4c67      	ldr	r4, [pc, #412]	; (8001354 <HAL_RCC_OscConfig+0x270>)
 80011b6:	6863      	ldr	r3, [r4, #4]
 80011b8:	f013 0f0c 	tst.w	r3, #12
 80011bc:	d007      	beq.n	80011ce <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d110      	bne.n	80011ea <HAL_RCC_OscConfig+0x106>
 80011c8:	6863      	ldr	r3, [r4, #4]
 80011ca:	03da      	lsls	r2, r3, #15
 80011cc:	d40d      	bmi.n	80011ea <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	079b      	lsls	r3, r3, #30
 80011d2:	d502      	bpl.n	80011da <HAL_RCC_OscConfig+0xf6>
 80011d4:	692b      	ldr	r3, [r5, #16]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d1af      	bne.n	800113a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	696a      	ldr	r2, [r5, #20]
 80011de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011e6:	6023      	str	r3, [r4, #0]
 80011e8:	e785      	b.n	80010f6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ea:	692a      	ldr	r2, [r5, #16]
 80011ec:	4b5a      	ldr	r3, [pc, #360]	; (8001358 <HAL_RCC_OscConfig+0x274>)
 80011ee:	b16a      	cbz	r2, 800120c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7fe fff4 	bl	80001e0 <HAL_GetTick>
 80011f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	079f      	lsls	r7, r3, #30
 80011fe:	d4ec      	bmi.n	80011da <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001200:	f7fe ffee 	bl	80001e0 <HAL_GetTick>
 8001204:	1b80      	subs	r0, r0, r6
 8001206:	2802      	cmp	r0, #2
 8001208:	d9f7      	bls.n	80011fa <HAL_RCC_OscConfig+0x116>
 800120a:	e7ad      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800120c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800120e:	f7fe ffe7 	bl	80001e0 <HAL_GetTick>
 8001212:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	0798      	lsls	r0, r3, #30
 8001218:	f57f af6d 	bpl.w	80010f6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7fe ffe0 	bl	80001e0 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	2802      	cmp	r0, #2
 8001224:	d9f6      	bls.n	8001214 <HAL_RCC_OscConfig+0x130>
 8001226:	e79f      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001228:	69aa      	ldr	r2, [r5, #24]
 800122a:	4c4a      	ldr	r4, [pc, #296]	; (8001354 <HAL_RCC_OscConfig+0x270>)
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x278>)
 800122e:	b1da      	cbz	r2, 8001268 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001234:	f7fe ffd4 	bl	80001e0 <HAL_GetTick>
 8001238:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800123c:	079b      	lsls	r3, r3, #30
 800123e:	d50d      	bpl.n	800125c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001240:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x27c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	fbb3 f3f2 	udiv	r3, r3, r2
 800124c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800124e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001250:	9b01      	ldr	r3, [sp, #4]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f9      	bne.n	800124e <HAL_RCC_OscConfig+0x16a>
 800125a:	e750      	b.n	80010fe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7fe ffc0 	bl	80001e0 <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9e9      	bls.n	800123a <HAL_RCC_OscConfig+0x156>
 8001266:	e77f      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001268:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800126a:	f7fe ffb9 	bl	80001e0 <HAL_GetTick>
 800126e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001272:	079f      	lsls	r7, r3, #30
 8001274:	f57f af43 	bpl.w	80010fe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001278:	f7fe ffb2 	bl	80001e0 <HAL_GetTick>
 800127c:	1b80      	subs	r0, r0, r6
 800127e:	2802      	cmp	r0, #2
 8001280:	d9f6      	bls.n	8001270 <HAL_RCC_OscConfig+0x18c>
 8001282:	e771      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001284:	4c33      	ldr	r4, [pc, #204]	; (8001354 <HAL_RCC_OscConfig+0x270>)
 8001286:	69e3      	ldr	r3, [r4, #28]
 8001288:	00d8      	lsls	r0, r3, #3
 800128a:	d424      	bmi.n	80012d6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800128c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	69e3      	ldr	r3, [r4, #28]
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	61e3      	str	r3, [r4, #28]
 8001296:	69e3      	ldr	r3, [r4, #28]
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	4e30      	ldr	r6, [pc, #192]	; (8001364 <HAL_RCC_OscConfig+0x280>)
 80012a2:	6833      	ldr	r3, [r6, #0]
 80012a4:	05d9      	lsls	r1, r3, #23
 80012a6:	d518      	bpl.n	80012da <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a8:	68eb      	ldr	r3, [r5, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d126      	bne.n	80012fc <HAL_RCC_OscConfig+0x218>
 80012ae:	6a23      	ldr	r3, [r4, #32]
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012b6:	f7fe ff93 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012be:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c0:	6a23      	ldr	r3, [r4, #32]
 80012c2:	079b      	lsls	r3, r3, #30
 80012c4:	d53f      	bpl.n	8001346 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80012c6:	2f00      	cmp	r7, #0
 80012c8:	f43f af1d 	beq.w	8001106 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	69e3      	ldr	r3, [r4, #28]
 80012ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d2:	61e3      	str	r3, [r4, #28]
 80012d4:	e717      	b.n	8001106 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2700      	movs	r7, #0
 80012d8:	e7e2      	b.n	80012a0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	6833      	ldr	r3, [r6, #0]
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012e2:	f7fe ff7d 	bl	80001e0 <HAL_GetTick>
 80012e6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	6833      	ldr	r3, [r6, #0]
 80012ea:	05da      	lsls	r2, r3, #23
 80012ec:	d4dc      	bmi.n	80012a8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7fe ff77 	bl	80001e0 <HAL_GetTick>
 80012f2:	eba0 0008 	sub.w	r0, r0, r8
 80012f6:	2864      	cmp	r0, #100	; 0x64
 80012f8:	d9f6      	bls.n	80012e8 <HAL_RCC_OscConfig+0x204>
 80012fa:	e735      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	b9ab      	cbnz	r3, 800132a <HAL_RCC_OscConfig+0x246>
 80012fe:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6223      	str	r3, [r4, #32]
 800130a:	6a23      	ldr	r3, [r4, #32]
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001312:	f7fe ff65 	bl	80001e0 <HAL_GetTick>
 8001316:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	6a23      	ldr	r3, [r4, #32]
 800131a:	0798      	lsls	r0, r3, #30
 800131c:	d5d3      	bpl.n	80012c6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7fe ff5f 	bl	80001e0 <HAL_GetTick>
 8001322:	1b80      	subs	r0, r0, r6
 8001324:	4540      	cmp	r0, r8
 8001326:	d9f7      	bls.n	8001318 <HAL_RCC_OscConfig+0x234>
 8001328:	e71e      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	2b05      	cmp	r3, #5
 800132c:	6a23      	ldr	r3, [r4, #32]
 800132e:	d103      	bne.n	8001338 <HAL_RCC_OscConfig+0x254>
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6223      	str	r3, [r4, #32]
 8001336:	e7ba      	b.n	80012ae <HAL_RCC_OscConfig+0x1ca>
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6223      	str	r3, [r4, #32]
 800133e:	6a23      	ldr	r3, [r4, #32]
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	e7b6      	b.n	80012b4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7fe ff4b 	bl	80001e0 <HAL_GetTick>
 800134a:	eba0 0008 	sub.w	r0, r0, r8
 800134e:	42b0      	cmp	r0, r6
 8001350:	d9b6      	bls.n	80012c0 <HAL_RCC_OscConfig+0x1dc>
 8001352:	e709      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
 8001354:	40021000 	.word	0x40021000
 8001358:	42420000 	.word	0x42420000
 800135c:	42420480 	.word	0x42420480
 8001360:	20000618 	.word	0x20000618
 8001364:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001368:	4c22      	ldr	r4, [pc, #136]	; (80013f4 <HAL_RCC_OscConfig+0x310>)
 800136a:	6863      	ldr	r3, [r4, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b08      	cmp	r3, #8
 8001372:	f43f aee2 	beq.w	800113a <HAL_RCC_OscConfig+0x56>
 8001376:	2300      	movs	r3, #0
 8001378:	4e1f      	ldr	r6, [pc, #124]	; (80013f8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800137c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137e:	d12b      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001380:	f7fe ff2e 	bl	80001e0 <HAL_GetTick>
 8001384:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	0199      	lsls	r1, r3, #6
 800138a:	d41f      	bmi.n	80013cc <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800138c:	6a2b      	ldr	r3, [r5, #32]
 800138e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001392:	d105      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001394:	6862      	ldr	r2, [r4, #4]
 8001396:	68a9      	ldr	r1, [r5, #8]
 8001398:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800139c:	430a      	orrs	r2, r1
 800139e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80013a2:	6862      	ldr	r2, [r4, #4]
 80013a4:	430b      	orrs	r3, r1
 80013a6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80013aa:	4313      	orrs	r3, r2
 80013ac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80013ae:	2301      	movs	r3, #1
 80013b0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013b2:	f7fe ff15 	bl	80001e0 <HAL_GetTick>
 80013b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	019a      	lsls	r2, r3, #6
 80013bc:	f53f aea7 	bmi.w	800110e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c0:	f7fe ff0e 	bl	80001e0 <HAL_GetTick>
 80013c4:	1b40      	subs	r0, r0, r5
 80013c6:	2802      	cmp	r0, #2
 80013c8:	d9f6      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2d4>
 80013ca:	e6cd      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013cc:	f7fe ff08 	bl	80001e0 <HAL_GetTick>
 80013d0:	1bc0      	subs	r0, r0, r7
 80013d2:	2802      	cmp	r0, #2
 80013d4:	d9d7      	bls.n	8001386 <HAL_RCC_OscConfig+0x2a2>
 80013d6:	e6c7      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80013d8:	f7fe ff02 	bl	80001e0 <HAL_GetTick>
 80013dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	f57f ae94 	bpl.w	800110e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7fe fefb 	bl	80001e0 <HAL_GetTick>
 80013ea:	1b40      	subs	r0, r0, r5
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f6      	bls.n	80013de <HAL_RCC_OscConfig+0x2fa>
 80013f0:	e6ba      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	42420060 	.word	0x42420060

080013fc <HAL_RCC_GetSysClockFreq>:
{
 80013fc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001400:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001402:	ac02      	add	r4, sp, #8
 8001404:	f103 0510 	add.w	r5, r3, #16
 8001408:	4622      	mov	r2, r4
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	6859      	ldr	r1, [r3, #4]
 800140e:	3308      	adds	r3, #8
 8001410:	c203      	stmia	r2!, {r0, r1}
 8001412:	42ab      	cmp	r3, r5
 8001414:	4614      	mov	r4, r2
 8001416:	d1f7      	bne.n	8001408 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001418:	2301      	movs	r3, #1
 800141a:	f88d 3004 	strb.w	r3, [sp, #4]
 800141e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001420:	4911      	ldr	r1, [pc, #68]	; (8001468 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001422:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001426:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001428:	f003 020c 	and.w	r2, r3, #12
 800142c:	2a08      	cmp	r2, #8
 800142e:	d117      	bne.n	8001460 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001430:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001434:	a806      	add	r0, sp, #24
 8001436:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001438:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800143a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800143e:	d50c      	bpl.n	800145a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001440:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001444:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001448:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800144a:	aa06      	add	r2, sp, #24
 800144c:	4413      	add	r3, r2
 800144e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001452:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001456:	b007      	add	sp, #28
 8001458:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_RCC_GetSysClockFreq+0x74>)
 800145c:	4350      	muls	r0, r2
 800145e:	e7fa      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001462:	e7f8      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x5a>
 8001464:	08003114 	.word	0x08003114
 8001468:	40021000 	.word	0x40021000
 800146c:	007a1200 	.word	0x007a1200
 8001470:	003d0900 	.word	0x003d0900

08001474 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <HAL_RCC_ClockConfig+0x138>)
{
 8001476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800147a:	6813      	ldr	r3, [r2, #0]
{
 800147c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	428b      	cmp	r3, r1
{
 8001484:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001486:	d328      	bcc.n	80014da <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	682a      	ldr	r2, [r5, #0]
 800148a:	0791      	lsls	r1, r2, #30
 800148c:	d432      	bmi.n	80014f4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148e:	07d2      	lsls	r2, r2, #31
 8001490:	d438      	bmi.n	8001504 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001492:	4a46      	ldr	r2, [pc, #280]	; (80015ac <HAL_RCC_ClockConfig+0x138>)
 8001494:	6813      	ldr	r3, [r2, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	429e      	cmp	r6, r3
 800149c:	d373      	bcc.n	8001586 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149e:	682a      	ldr	r2, [r5, #0]
 80014a0:	4c43      	ldr	r4, [pc, #268]	; (80015b0 <HAL_RCC_ClockConfig+0x13c>)
 80014a2:	f012 0f04 	tst.w	r2, #4
 80014a6:	d179      	bne.n	800159c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a8:	0713      	lsls	r3, r2, #28
 80014aa:	d506      	bpl.n	80014ba <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ac:	6863      	ldr	r3, [r4, #4]
 80014ae:	692a      	ldr	r2, [r5, #16]
 80014b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014b8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ba:	f7ff ff9f 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	4a3c      	ldr	r2, [pc, #240]	; (80015b4 <HAL_RCC_ClockConfig+0x140>)
 80014c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	40d8      	lsrs	r0, r3
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_RCC_ClockConfig+0x144>)
 80014cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7fe fe44 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
}
 80014d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	f023 0307 	bic.w	r3, r3, #7
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014e4:	6813      	ldr	r3, [r2, #0]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	4299      	cmp	r1, r3
 80014ec:	d0cc      	beq.n	8001488 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	492e      	ldr	r1, [pc, #184]	; (80015b0 <HAL_RCC_ClockConfig+0x13c>)
 80014f6:	68a8      	ldr	r0, [r5, #8]
 80014f8:	684b      	ldr	r3, [r1, #4]
 80014fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014fe:	4303      	orrs	r3, r0
 8001500:	604b      	str	r3, [r1, #4]
 8001502:	e7c4      	b.n	800148e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001504:	686a      	ldr	r2, [r5, #4]
 8001506:	4c2a      	ldr	r4, [pc, #168]	; (80015b0 <HAL_RCC_ClockConfig+0x13c>)
 8001508:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	d0ec      	beq.n	80014ee <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001514:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001516:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	4313      	orrs	r3, r2
 8001520:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001522:	f7fe fe5d 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001526:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001528:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	2b01      	cmp	r3, #1
 800152c:	d114      	bne.n	8001558 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b04      	cmp	r3, #4
 8001536:	d0ac      	beq.n	8001492 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7fe fe52 	bl	80001e0 <HAL_GetTick>
 800153c:	1bc0      	subs	r0, r0, r7
 800153e:	4540      	cmp	r0, r8
 8001540:	d9f5      	bls.n	800152e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001542:	2003      	movs	r0, #3
 8001544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001548:	2a02      	cmp	r2, #2
 800154a:	d102      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001550:	e7df      	b.n	8001512 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	f013 0f02 	tst.w	r3, #2
 8001556:	e7dc      	b.n	8001512 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001558:	2b02      	cmp	r3, #2
 800155a:	d10f      	bne.n	800157c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b08      	cmp	r3, #8
 8001564:	d095      	beq.n	8001492 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001566:	f7fe fe3b 	bl	80001e0 <HAL_GetTick>
 800156a:	1bc0      	subs	r0, r0, r7
 800156c:	4540      	cmp	r0, r8
 800156e:	d9f5      	bls.n	800155c <HAL_RCC_ClockConfig+0xe8>
 8001570:	e7e7      	b.n	8001542 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001572:	f7fe fe35 	bl	80001e0 <HAL_GetTick>
 8001576:	1bc0      	subs	r0, r0, r7
 8001578:	4540      	cmp	r0, r8
 800157a:	d8e2      	bhi.n	8001542 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800157c:	6863      	ldr	r3, [r4, #4]
 800157e:	f013 0f0c 	tst.w	r3, #12
 8001582:	d1f6      	bne.n	8001572 <HAL_RCC_ClockConfig+0xfe>
 8001584:	e785      	b.n	8001492 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	f023 0307 	bic.w	r3, r3, #7
 800158c:	4333      	orrs	r3, r6
 800158e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	429e      	cmp	r6, r3
 8001598:	d1a9      	bne.n	80014ee <HAL_RCC_ClockConfig+0x7a>
 800159a:	e780      	b.n	800149e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	68e9      	ldr	r1, [r5, #12]
 80015a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6063      	str	r3, [r4, #4]
 80015a8:	e77e      	b.n	80014a8 <HAL_RCC_ClockConfig+0x34>
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	0800313f 	.word	0x0800313f
 80015b8:	20000618 	.word	0x20000618

080015bc <HAL_RCC_GetHCLKFreq>:
}
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000618 	.word	0x20000618

080015c8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015d6:	6810      	ldr	r0, [r2, #0]
}    
 80015d8:	40d8      	lsrs	r0, r3
 80015da:	4770      	bx	lr
 80015dc:	40021000 	.word	0x40021000
 80015e0:	0800314f 	.word	0x0800314f
 80015e4:	20000618 	.word	0x20000618

080015e8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015e8:	6803      	ldr	r3, [r0, #0]
{
 80015ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015ee:	07d9      	lsls	r1, r3, #31
{
 80015f0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015f2:	d520      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f4:	4c35      	ldr	r4, [pc, #212]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015f6:	69e3      	ldr	r3, [r4, #28]
 80015f8:	00da      	lsls	r2, r3, #3
 80015fa:	d432      	bmi.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80015fc:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	69e3      	ldr	r3, [r4, #28]
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61e3      	str	r3, [r4, #28]
 8001606:	69e3      	ldr	r3, [r4, #28]
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4e2f      	ldr	r6, [pc, #188]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001612:	6833      	ldr	r3, [r6, #0]
 8001614:	05db      	lsls	r3, r3, #23
 8001616:	d526      	bpl.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001618:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800161a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800161e:	d136      	bne.n	800168e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001620:	6a23      	ldr	r3, [r4, #32]
 8001622:	686a      	ldr	r2, [r5, #4]
 8001624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001628:	4313      	orrs	r3, r2
 800162a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800162c:	b11f      	cbz	r7, 8001636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	69e3      	ldr	r3, [r4, #28]
 8001630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001634:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001636:	6828      	ldr	r0, [r5, #0]
 8001638:	0783      	lsls	r3, r0, #30
 800163a:	d506      	bpl.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800163c:	4a23      	ldr	r2, [pc, #140]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800163e:	68a9      	ldr	r1, [r5, #8]
 8001640:	6853      	ldr	r3, [r2, #4]
 8001642:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001646:	430b      	orrs	r3, r1
 8001648:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800164a:	f010 0010 	ands.w	r0, r0, #16
 800164e:	d01b      	beq.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001650:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001652:	68e9      	ldr	r1, [r5, #12]
 8001654:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001656:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001658:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800165c:	430b      	orrs	r3, r1
 800165e:	6053      	str	r3, [r2, #4]
 8001660:	e012      	b.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2700      	movs	r7, #0
 8001664:	e7d4      	b.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001666:	6833      	ldr	r3, [r6, #0]
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800166e:	f7fe fdb7 	bl	80001e0 <HAL_GetTick>
 8001672:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	6833      	ldr	r3, [r6, #0]
 8001676:	05d8      	lsls	r0, r3, #23
 8001678:	d4ce      	bmi.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7fe fdb1 	bl	80001e0 <HAL_GetTick>
 800167e:	eba0 0008 	sub.w	r0, r0, r8
 8001682:	2864      	cmp	r0, #100	; 0x64
 8001684:	d9f6      	bls.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001686:	2003      	movs	r0, #3
}
 8001688:	b002      	add	sp, #8
 800168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800168e:	686a      	ldr	r2, [r5, #4]
 8001690:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001694:	4293      	cmp	r3, r2
 8001696:	d0c3      	beq.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001698:	2001      	movs	r0, #1
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800169c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800169e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016a0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016a6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80016a8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016aa:	07d9      	lsls	r1, r3, #31
 80016ac:	d5b8      	bpl.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80016ae:	f7fe fd97 	bl	80001e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80016b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	6a23      	ldr	r3, [r4, #32]
 80016ba:	079a      	lsls	r2, r3, #30
 80016bc:	d4b0      	bmi.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7fe fd8f 	bl	80001e0 <HAL_GetTick>
 80016c2:	1b80      	subs	r0, r0, r6
 80016c4:	4540      	cmp	r0, r8
 80016c6:	d9f7      	bls.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80016c8:	e7dd      	b.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	42420440 	.word	0x42420440

080016d8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80016d8:	b084      	sub	sp, #16
 80016da:	a801      	add	r0, sp, #4
 80016dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80016e0:	b004      	add	sp, #16
 80016e2:	2000      	movs	r0, #0
 80016e4:	4770      	bx	lr

080016e6 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80016e6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80016f0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80016f4:	2000      	movs	r0, #0
 80016f6:	4770      	bx	lr

080016f8 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80016f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80016fc:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001700:	045b      	lsls	r3, r3, #17
 8001702:	0c5b      	lsrs	r3, r3, #17
 8001704:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001708:	2000      	movs	r0, #0
 800170a:	4770      	bx	lr

0800170c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800170c:	2000      	movs	r0, #0
 800170e:	4770      	bx	lr

08001710 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001710:	b084      	sub	sp, #16
 8001712:	b510      	push	{r4, lr}
 8001714:	ac03      	add	r4, sp, #12
 8001716:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 800171a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800171e:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001720:	2301      	movs	r3, #1
 8001722:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001726:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 800172a:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800172e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001732:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001736:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001738:	b29b      	uxth	r3, r3
 800173a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800173e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001742:	4610      	mov	r0, r2
 8001744:	4770      	bx	lr
	...

08001748 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 800174a:	78cb      	ldrb	r3, [r1, #3]
 800174c:	780a      	ldrb	r2, [r1, #0]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d80f      	bhi.n	8001772 <USB_ActivateEndpoint+0x2a>
 8001752:	e8df f003 	tbb	[pc, r3]
 8001756:	6402      	.short	0x6402
 8001758:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800175a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800175e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800176e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001772:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001776:	780c      	ldrb	r4, [r1, #0]
 8001778:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800177c:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001780:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001784:	401a      	ands	r2, r3
 8001786:	432a      	orrs	r2, r5
 8001788:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800178c:	7a8a      	ldrb	r2, [r1, #10]
 800178e:	780d      	ldrb	r5, [r1, #0]
 8001790:	2a00      	cmp	r2, #0
 8001792:	f040 8097 	bne.w	80018c4 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001796:	784c      	ldrb	r4, [r1, #1]
 8001798:	888a      	ldrh	r2, [r1, #4]
 800179a:	2c00      	cmp	r4, #0
 800179c:	d04a      	beq.n	8001834 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800179e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80017a2:	0852      	lsrs	r2, r2, #1
 80017a4:	b2a4      	uxth	r4, r4
 80017a6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80017aa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80017ae:	0052      	lsls	r2, r2, #1
 80017b0:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017b4:	780c      	ldrb	r4, [r1, #0]
 80017b6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80017ba:	0652      	lsls	r2, r2, #25
 80017bc:	d508      	bpl.n	80017d0 <USB_ActivateEndpoint+0x88>
 80017be:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017cc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80017d0:	780a      	ldrb	r2, [r1, #0]
 80017d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80017f2:	2000      	movs	r0, #0
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80017f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80017fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001802:	041b      	lsls	r3, r3, #16
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	e7b2      	b.n	800176e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001808:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800180c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	0c1b      	lsrs	r3, r3, #16
 8001818:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800181c:	e7a7      	b.n	800176e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800181e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001822:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	0c1b      	lsrs	r3, r3, #16
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	e79c      	b.n	800176e <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001834:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001838:	0852      	lsrs	r2, r2, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	3304      	adds	r3, #4
 800183e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001842:	0052      	lsls	r2, r2, #1
 8001844:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001848:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800184c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001850:	690d      	ldr	r5, [r1, #16]
 8001852:	b292      	uxth	r2, r2
 8001854:	780b      	ldrb	r3, [r1, #0]
 8001856:	3206      	adds	r2, #6
 8001858:	2d3e      	cmp	r5, #62	; 0x3e
 800185a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800185e:	d929      	bls.n	80018b4 <USB_ActivateEndpoint+0x16c>
 8001860:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001864:	06eb      	lsls	r3, r5, #27
 8001866:	bf04      	itt	eq
 8001868:	f106 33ff 	addeq.w	r3, r6, #4294967295
 800186c:	b29e      	uxtheq	r6, r3
 800186e:	4b6e      	ldr	r3, [pc, #440]	; (8001a28 <USB_ActivateEndpoint+0x2e0>)
 8001870:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001874:	b29b      	uxth	r3, r3
 8001876:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800187a:	780a      	ldrb	r2, [r1, #0]
 800187c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001880:	045e      	lsls	r6, r3, #17
 8001882:	d50b      	bpl.n	800189c <USB_ActivateEndpoint+0x154>
 8001884:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800188c:	051b      	lsls	r3, r3, #20
 800188e:	0d1b      	lsrs	r3, r3, #20
 8001890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001898:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800189c:	780a      	ldrb	r2, [r1, #0]
 800189e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018b2:	e798      	b.n	80017e6 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80018b4:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80018b8:	07ed      	lsls	r5, r5, #31
 80018ba:	bf44      	itt	mi
 80018bc:	3301      	addmi	r3, #1
 80018be:	b29b      	uxthmi	r3, r3
 80018c0:	029b      	lsls	r3, r3, #10
 80018c2:	e7d7      	b.n	8001874 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80018c4:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80018c8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80018cc:	0512      	lsls	r2, r2, #20
 80018ce:	0d12      	lsrs	r2, r2, #20
 80018d0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80018d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018d8:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80018dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80018e0:	780c      	ldrb	r4, [r1, #0]
 80018e2:	b292      	uxth	r2, r2
 80018e4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80018e8:	88cc      	ldrh	r4, [r1, #6]
 80018ea:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 80018ee:	0864      	lsrs	r4, r4, #1
 80018f0:	0064      	lsls	r4, r4, #1
 80018f2:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 80018f6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80018fa:	780c      	ldrb	r4, [r1, #0]
 80018fc:	b292      	uxth	r2, r2
 80018fe:	3204      	adds	r2, #4
 8001900:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001904:	890c      	ldrh	r4, [r1, #8]
 8001906:	0864      	lsrs	r4, r4, #1
 8001908:	0064      	lsls	r4, r4, #1
 800190a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 800190e:	784a      	ldrb	r2, [r1, #1]
 8001910:	780c      	ldrb	r4, [r1, #0]
 8001912:	2a00      	cmp	r2, #0
 8001914:	d147      	bne.n	80019a6 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001916:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800191a:	0455      	lsls	r5, r2, #17
 800191c:	d508      	bpl.n	8001930 <USB_ActivateEndpoint+0x1e8>
 800191e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001922:	4013      	ands	r3, r2
 8001924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001930:	780a      	ldrb	r2, [r1, #0]
 8001932:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001936:	065c      	lsls	r4, r3, #25
 8001938:	d50b      	bpl.n	8001952 <USB_ActivateEndpoint+0x20a>
 800193a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800193e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001942:	051b      	lsls	r3, r3, #20
 8001944:	0d1b      	lsrs	r3, r3, #20
 8001946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800194e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001952:	780a      	ldrb	r2, [r1, #0]
 8001954:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800195c:	051b      	lsls	r3, r3, #20
 800195e:	0d1b      	lsrs	r3, r3, #20
 8001960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001964:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001968:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800196c:	f248 0280 	movw	r2, #32896	; 0x8080
 8001970:	780c      	ldrb	r4, [r1, #0]
 8001972:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800197a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800197e:	041b      	lsls	r3, r3, #16
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001986:	4313      	orrs	r3, r2
 8001988:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800198c:	7809      	ldrb	r1, [r1, #0]
 800198e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	4313      	orrs	r3, r2
 80019a0:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80019a4:	e725      	b.n	80017f2 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019a6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019aa:	0452      	lsls	r2, r2, #17
 80019ac:	d508      	bpl.n	80019c0 <USB_ActivateEndpoint+0x278>
 80019ae:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019b2:	4013      	ands	r3, r2
 80019b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019c0:	780a      	ldrb	r2, [r1, #0]
 80019c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019c6:	065b      	lsls	r3, r3, #25
 80019c8:	d50b      	bpl.n	80019e2 <USB_ActivateEndpoint+0x29a>
 80019ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d2:	051b      	lsls	r3, r3, #20
 80019d4:	0d1b      	lsrs	r3, r3, #20
 80019d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80019e2:	780a      	ldrb	r2, [r1, #0]
 80019e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ec:	051b      	lsls	r3, r3, #20
 80019ee:	0d1b      	lsrs	r3, r3, #20
 80019f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80019fc:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a00:	780c      	ldrb	r4, [r1, #0]
 8001a02:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a0e:	041b      	lsls	r3, r3, #16
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a18:	7809      	ldrb	r1, [r1, #0]
 8001a1a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a26:	e7b8      	b.n	800199a <USB_ActivateEndpoint+0x252>
 8001a28:	ffff8000 	.word	0xffff8000

08001a2c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001a2c:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001a2e:	7a8c      	ldrb	r4, [r1, #10]
 8001a30:	784a      	ldrb	r2, [r1, #1]
 8001a32:	780b      	ldrb	r3, [r1, #0]
 8001a34:	bbcc      	cbnz	r4, 8001aaa <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001a36:	b302      	cbz	r2, 8001a7a <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a38:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a3c:	0652      	lsls	r2, r2, #25
 8001a3e:	d50b      	bpl.n	8001a58 <USB_DeactivateEndpoint+0x2c>
 8001a40:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a48:	0512      	lsls	r2, r2, #20
 8001a4a:	0d12      	lsrs	r2, r2, #20
 8001a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a50:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001a54:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001a58:	780a      	ldrb	r2, [r1, #0]
 8001a5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	0c1b      	lsrs	r3, r3, #16
 8001a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001a76:	2000      	movs	r0, #0
 8001a78:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a7a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a7e:	0454      	lsls	r4, r2, #17
 8001a80:	d50b      	bpl.n	8001a9a <USB_DeactivateEndpoint+0x6e>
 8001a82:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a8a:	0512      	lsls	r2, r2, #20
 8001a8c:	0d12      	lsrs	r2, r2, #20
 8001a8e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a96:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a9a:	780a      	ldrb	r2, [r1, #0]
 8001a9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa8:	e7dd      	b.n	8001a66 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d148      	bne.n	8001b40 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001aae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ab2:	0452      	lsls	r2, r2, #17
 8001ab4:	d50b      	bpl.n	8001ace <USB_DeactivateEndpoint+0xa2>
 8001ab6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001aba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001abe:	0512      	lsls	r2, r2, #20
 8001ac0:	0d12      	lsrs	r2, r2, #20
 8001ac2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ace:	780a      	ldrb	r2, [r1, #0]
 8001ad0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ad4:	065c      	lsls	r4, r3, #25
 8001ad6:	d50b      	bpl.n	8001af0 <USB_DeactivateEndpoint+0xc4>
 8001ad8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ae0:	051b      	lsls	r3, r3, #20
 8001ae2:	0d1b      	lsrs	r3, r3, #20
 8001ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001af0:	780a      	ldrb	r2, [r1, #0]
 8001af2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001afa:	051b      	lsls	r3, r3, #20
 8001afc:	0d1b      	lsrs	r3, r3, #20
 8001afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b0a:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b0e:	780c      	ldrb	r4, [r1, #0]
 8001b10:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b26:	7809      	ldrb	r1, [r1, #0]
 8001b28:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001b3e:	e79a      	b.n	8001a76 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b40:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001b44:	0452      	lsls	r2, r2, #17
 8001b46:	d50b      	bpl.n	8001b60 <USB_DeactivateEndpoint+0x134>
 8001b48:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001b4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b50:	0512      	lsls	r2, r2, #20
 8001b52:	0d12      	lsrs	r2, r2, #20
 8001b54:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b5c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b60:	780a      	ldrb	r2, [r1, #0]
 8001b62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b66:	065b      	lsls	r3, r3, #25
 8001b68:	d50b      	bpl.n	8001b82 <USB_DeactivateEndpoint+0x156>
 8001b6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b72:	051b      	lsls	r3, r3, #20
 8001b74:	0d1b      	lsrs	r3, r3, #20
 8001b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001b82:	780a      	ldrb	r2, [r1, #0]
 8001b84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b8c:	051b      	lsls	r3, r3, #20
 8001b8e:	0d1b      	lsrs	r3, r3, #20
 8001b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b9c:	f248 0280 	movw	r2, #32896	; 0x8080
 8001ba0:	780c      	ldrb	r4, [r1, #0]
 8001ba2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001bb8:	7809      	ldrb	r1, [r1, #0]
 8001bba:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc6:	e7b5      	b.n	8001b34 <USB_DeactivateEndpoint+0x108>

08001bc8 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001bc8:	780a      	ldrb	r2, [r1, #0]
 8001bca:	b98a      	cbnz	r2, 8001bf0 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001bcc:	8803      	ldrh	r3, [r0, #0]
 8001bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bde:	f083 0310 	eor.w	r3, r3, #16
 8001be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bea:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001bec:	2000      	movs	r0, #0
 8001bee:	4770      	bx	lr
    if (ep->is_in)
 8001bf0:	784b      	ldrb	r3, [r1, #1]
 8001bf2:	b183      	cbz	r3, 8001c16 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001bf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001c14:	e7ea      	b.n	8001bec <USB_EPSetStall+0x24>
 8001c16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	0c1b      	lsrs	r3, r3, #16
 8001c26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c2a:	e7ed      	b.n	8001c08 <USB_EPSetStall+0x40>

08001c2c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001c2c:	784b      	ldrb	r3, [r1, #1]
 8001c2e:	780a      	ldrb	r2, [r1, #0]
 8001c30:	b313      	cbz	r3, 8001c78 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c36:	065b      	lsls	r3, r3, #25
 8001c38:	d50b      	bpl.n	8001c52 <USB_EPClearStall+0x26>
 8001c3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c42:	051b      	lsls	r3, r3, #20
 8001c44:	0d1b      	lsrs	r3, r3, #20
 8001c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001c52:	780a      	ldrb	r2, [r1, #0]
 8001c54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001c74:	2000      	movs	r0, #0
 8001c76:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c7c:	045b      	lsls	r3, r3, #17
 8001c7e:	d50b      	bpl.n	8001c98 <USB_EPClearStall+0x6c>
 8001c80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c88:	051b      	lsls	r3, r3, #20
 8001c8a:	0d1b      	lsrs	r3, r3, #20
 8001c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c98:	780a      	ldrb	r2, [r1, #0]
 8001c9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001cae:	e7db      	b.n	8001c68 <USB_EPClearStall+0x3c>

08001cb0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001cb0:	b911      	cbnz	r1, 8001cb8 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001cb8:	2000      	movs	r0, #0
 8001cba:	4770      	bx	lr

08001cbc <USB_DevConnect>:
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	4770      	bx	lr

08001cc0 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	4770      	bx	lr

08001cc4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001cc4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001cc8:	b280      	uxth	r0, r0
 8001cca:	4770      	bx	lr

08001ccc <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001ccc:	2000      	movs	r0, #0
 8001cce:	4770      	bx	lr

08001cd0 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001cd0:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001cd2:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001cd4:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001cd6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001cda:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001cdc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001ce0:	42a3      	cmp	r3, r4
 8001ce2:	d100      	bne.n	8001ce6 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001cea:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001cee:	3401      	adds	r4, #1
 8001cf0:	e7f6      	b.n	8001ce0 <USB_WritePMA+0x10>
	...

08001cf4 <USB_EPStartXfer>:
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001cf8:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001cfa:	7849      	ldrb	r1, [r1, #1]
{
 8001cfc:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001cfe:	2901      	cmp	r1, #1
 8001d00:	6933      	ldr	r3, [r6, #16]
 8001d02:	7ab0      	ldrb	r0, [r6, #10]
 8001d04:	d166      	bne.n	8001dd4 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001d06:	429a      	cmp	r2, r3
 8001d08:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001d0a:	bf9b      	ittet	ls
 8001d0c:	2300      	movls	r3, #0
 8001d0e:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001d10:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001d12:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001d14:	bf88      	it	hi
 8001d16:	61b2      	strhi	r2, [r6, #24]
 8001d18:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001d1a:	bb10      	cbnz	r0, 8001d62 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001d1c:	88b2      	ldrh	r2, [r6, #4]
 8001d1e:	6971      	ldr	r1, [r6, #20]
 8001d20:	4628      	mov	r0, r5
 8001d22:	f7ff ffd5 	bl	8001cd0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001d26:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001d2a:	7832      	ldrb	r2, [r6, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3302      	adds	r3, #2
 8001d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d34:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001d38:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001d3c:	7832      	ldrb	r2, [r6, #0]
 8001d3e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001d5e:	2000      	movs	r0, #0
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001d62:	7832      	ldrb	r2, [r6, #0]
 8001d64:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001d68:	00d2      	lsls	r2, r2, #3
 8001d6a:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001d6e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001d72:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001d74:	d01a      	beq.n	8001dac <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001d76:	3102      	adds	r1, #2
 8001d78:	440a      	add	r2, r1
 8001d7a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001d7e:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001d82:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001d84:	6971      	ldr	r1, [r6, #20]
 8001d86:	4628      	mov	r0, r5
 8001d88:	f7ff ffa2 	bl	8001cd0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001d8c:	7873      	ldrb	r3, [r6, #1]
 8001d8e:	7832      	ldrb	r2, [r6, #0]
 8001d90:	b99b      	cbnz	r3, 8001dba <USB_EPStartXfer+0xc6>
 8001d92:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9a:	051b      	lsls	r3, r3, #20
 8001d9c:	0d1b      	lsrs	r3, r3, #20
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001da6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001daa:	e7c7      	b.n	8001d3c <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001dac:	440a      	add	r2, r1
 8001dae:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001db2:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001db6:	88f2      	ldrh	r2, [r6, #6]
 8001db8:	e7e4      	b.n	8001d84 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d1be      	bne.n	8001d3c <USB_EPStartXfer+0x48>
 8001dbe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc6:	051b      	lsls	r3, r3, #20
 8001dc8:	0d1b      	lsrs	r3, r3, #20
 8001dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd2:	e7e8      	b.n	8001da6 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001dd4:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001dd6:	bf93      	iteet	ls
 8001dd8:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001dda:	1ad2      	subhi	r2, r2, r3
 8001ddc:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001dde:	61b3      	strls	r3, [r6, #24]
 8001de0:	bf98      	it	ls
 8001de2:	4613      	movls	r3, r2
 8001de4:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001de6:	bb70      	cbnz	r0, 8001e46 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001de8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001dec:	2b3e      	cmp	r3, #62	; 0x3e
 8001dee:	b289      	uxth	r1, r1
 8001df0:	f101 0106 	add.w	r1, r1, #6
 8001df4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001df8:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001dfc:	d918      	bls.n	8001e30 <USB_EPStartXfer+0x13c>
 8001dfe:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001e02:	06db      	lsls	r3, r3, #27
 8001e04:	bf04      	itt	eq
 8001e06:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001e0a:	b29a      	uxtheq	r2, r3
 8001e0c:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <USB_EPStartXfer+0x1fc>)
 8001e0e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e18:	7832      	ldrb	r2, [r6, #0]
 8001e1a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001e2e:	e790      	b.n	8001d52 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001e30:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001e34:	07dc      	lsls	r4, r3, #31
 8001e36:	bf44      	itt	mi
 8001e38:	3201      	addmi	r2, #1
 8001e3a:	b292      	uxthmi	r2, r2
 8001e3c:	0292      	lsls	r2, r2, #10
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001e44:	e7e8      	b.n	8001e18 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001e46:	b9b9      	cbnz	r1, 8001e78 <USB_EPStartXfer+0x184>
 8001e48:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4e:	b289      	uxth	r1, r1
 8001e50:	f101 0102 	add.w	r1, r1, #2
 8001e54:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001e58:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8001e5c:	d928      	bls.n	8001eb0 <USB_EPStartXfer+0x1bc>
 8001e5e:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8001e62:	06da      	lsls	r2, r3, #27
 8001e64:	bf04      	itt	eq
 8001e66:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8001e6a:	b290      	uxtheq	r0, r2
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <USB_EPStartXfer+0x1fc>)
 8001e6e:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001e72:	b292      	uxth	r2, r2
 8001e74:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8001e78:	7872      	ldrb	r2, [r6, #1]
 8001e7a:	7831      	ldrb	r1, [r6, #0]
 8001e7c:	bb5a      	cbnz	r2, 8001ed6 <USB_EPStartXfer+0x1e2>
 8001e7e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001e82:	2b3e      	cmp	r3, #62	; 0x3e
 8001e84:	b292      	uxth	r2, r2
 8001e86:	f102 0206 	add.w	r2, r2, #6
 8001e8a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001e8e:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001e92:	d915      	bls.n	8001ec0 <USB_EPStartXfer+0x1cc>
 8001e94:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8001e98:	06dc      	lsls	r4, r3, #27
 8001e9a:	bf04      	itt	eq
 8001e9c:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8001ea0:	b299      	uxtheq	r1, r3
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <USB_EPStartXfer+0x1fc>)
 8001ea4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8001eae:	e7b3      	b.n	8001e18 <USB_EPStartXfer+0x124>
 8001eb0:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001eb4:	07d8      	lsls	r0, r3, #31
 8001eb6:	bf44      	itt	mi
 8001eb8:	3201      	addmi	r2, #1
 8001eba:	b292      	uxthmi	r2, r2
 8001ebc:	0292      	lsls	r2, r2, #10
 8001ebe:	e7d8      	b.n	8001e72 <USB_EPStartXfer+0x17e>
 8001ec0:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8001ec4:	07db      	lsls	r3, r3, #31
 8001ec6:	bf44      	itt	mi
 8001ec8:	3101      	addmi	r1, #1
 8001eca:	b289      	uxthmi	r1, r1
 8001ecc:	0289      	lsls	r1, r1, #10
 8001ece:	b289      	uxth	r1, r1
 8001ed0:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8001ed4:	e7a0      	b.n	8001e18 <USB_EPStartXfer+0x124>
 8001ed6:	2a01      	cmp	r2, #1
 8001ed8:	d19e      	bne.n	8001e18 <USB_EPStartXfer+0x124>
 8001eda:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	3202      	adds	r2, #2
 8001ee2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001ee6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001eea:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001eee:	e793      	b.n	8001e18 <USB_EPStartXfer+0x124>
 8001ef0:	ffff8000 	.word	0xffff8000

08001ef4 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001ef4:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001ef6:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001ef8:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001efa:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001efe:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001f00:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001f04:	42a3      	cmp	r3, r4
 8001f06:	d100      	bne.n	8001f0a <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001f08:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001f0a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001f0e:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001f12:	3401      	adds	r4, #1
 8001f14:	e7f6      	b.n	8001f04 <USB_ReadPMA+0x10>

08001f16 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f16:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001f1a:	b11b      	cbz	r3, 8001f24 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001f22:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8001f24:	2002      	movs	r0, #2
  }
}
 8001f26:	4770      	bx	lr

08001f28 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001f28:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8001f2c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f2e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001f32:	b15b      	cbz	r3, 8001f4c <USBD_CDC_EP0_RxReady+0x24>
 8001f34:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001f38:	28ff      	cmp	r0, #255	; 0xff
 8001f3a:	d007      	beq.n	8001f4c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001f42:	4621      	mov	r1, r4
 8001f44:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001f46:	23ff      	movs	r3, #255	; 0xff
 8001f48:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	bd10      	pop	{r4, pc}

08001f50 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001f50:	2343      	movs	r3, #67	; 0x43
 8001f52:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001f54:	4800      	ldr	r0, [pc, #0]	; (8001f58 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001f56:	4770      	bx	lr
 8001f58:	20000040 	.word	0x20000040

08001f5c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001f5c:	2343      	movs	r3, #67	; 0x43
 8001f5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001f60:	4800      	ldr	r0, [pc, #0]	; (8001f64 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001f62:	4770      	bx	lr
 8001f64:	20000084 	.word	0x20000084

08001f68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001f68:	2343      	movs	r3, #67	; 0x43
 8001f6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001f6c:	4800      	ldr	r0, [pc, #0]	; (8001f70 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001f6e:	4770      	bx	lr
 8001f70:	200000d4 	.word	0x200000d4

08001f74 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001f74:	230a      	movs	r3, #10
 8001f76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001f78:	4800      	ldr	r0, [pc, #0]	; (8001f7c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001f7a:	4770      	bx	lr
 8001f7c:	200000c8 	.word	0x200000c8

08001f80 <USBD_CDC_DataOut>:
{      
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f84:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001f88:	f001 f808 	bl	8002f9c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8001f8c:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001f90:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8001f94:	b14b      	cbz	r3, 8001faa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001f96:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001f9a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001fa4:	4798      	blx	r3
    return USBD_OK;
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001faa:	2002      	movs	r0, #2
}
 8001fac:	bd38      	pop	{r3, r4, r5, pc}
	...

08001fb0 <USBD_CDC_Setup>:
{
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fb2:	780f      	ldrb	r7, [r1, #0]
{
 8001fb4:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fb6:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8001fba:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fbc:	d023      	beq.n	8002006 <USBD_CDC_Setup+0x56>
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d119      	bne.n	8001ff6 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8001fc2:	88ca      	ldrh	r2, [r1, #6]
 8001fc4:	784b      	ldrb	r3, [r1, #1]
 8001fc6:	b1c2      	cbz	r2, 8001ffa <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8001fc8:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001fca:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8001fce:	d50b      	bpl.n	8001fe8 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001fd0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	688f      	ldr	r7, [r1, #8]
 8001fd8:	4629      	mov	r1, r5
 8001fda:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4630      	mov	r0, r6
 8001fe0:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8001fe2:	f000 fb8a 	bl	80026fa <USBD_CtlSendData>
      break;
 8001fe6:	e006      	b.n	8001ff6 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8001fe8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8001fec:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f000 fb97 	bl	8002724 <USBD_CtlPrepareRx>
}
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001ffa:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8001ffe:	6884      	ldr	r4, [r0, #8]
 8002000:	4618      	mov	r0, r3
 8002002:	47a0      	blx	r4
 8002004:	e7f7      	b.n	8001ff6 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002006:	784b      	ldrb	r3, [r1, #1]
 8002008:	2b0a      	cmp	r3, #10
 800200a:	d1f4      	bne.n	8001ff6 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 800200c:	2201      	movs	r2, #1
 800200e:	4901      	ldr	r1, [pc, #4]	; (8002014 <USBD_CDC_Setup+0x64>)
 8002010:	e7e7      	b.n	8001fe2 <USBD_CDC_Setup+0x32>
 8002012:	bf00      	nop
 8002014:	2000067c 	.word	0x2000067c

08002018 <USBD_CDC_DeInit>:
{
 8002018:	b510      	push	{r4, lr}
 800201a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800201c:	2181      	movs	r1, #129	; 0x81
 800201e:	f000 ff59 	bl	8002ed4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002022:	2101      	movs	r1, #1
 8002024:	4620      	mov	r0, r4
 8002026:	f000 ff55 	bl	8002ed4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800202a:	2182      	movs	r1, #130	; 0x82
 800202c:	4620      	mov	r0, r4
 800202e:	f000 ff51 	bl	8002ed4 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002032:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002036:	b153      	cbz	r3, 800204e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002038:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002040:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002044:	f000 ffb4 	bl	8002fb0 <USBD_static_free>
    pdev->pClassData = NULL;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800204e:	2000      	movs	r0, #0
 8002050:	bd10      	pop	{r4, pc}

08002052 <USBD_CDC_Init>:
{
 8002052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002054:	7c03      	ldrb	r3, [r0, #16]
{
 8002056:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002058:	bb7b      	cbnz	r3, 80020ba <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800205a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205e:	2202      	movs	r2, #2
 8002060:	2181      	movs	r1, #129	; 0x81
 8002062:	f000 ff27 	bl	8002eb4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002066:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800206a:	2202      	movs	r2, #2
 800206c:	2101      	movs	r1, #1
 800206e:	4620      	mov	r0, r4
 8002070:	f000 ff20 	bl	8002eb4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002074:	2308      	movs	r3, #8
 8002076:	2203      	movs	r2, #3
 8002078:	2182      	movs	r1, #130	; 0x82
 800207a:	4620      	mov	r0, r4
 800207c:	f000 ff1a 	bl	8002eb4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002080:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002084:	f000 ff90 	bl	8002fa8 <USBD_static_malloc>
 8002088:	4606      	mov	r6, r0
 800208a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800208e:	b320      	cbz	r0, 80020da <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002090:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002092:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800209a:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800209c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80020a0:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80020a4:	b987      	cbnz	r7, 80020c8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80020a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020aa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80020ae:	2101      	movs	r1, #1
 80020b0:	4620      	mov	r0, r4
 80020b2:	f000 ff65 	bl	8002f80 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80020b6:	4638      	mov	r0, r7
 80020b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	2202      	movs	r2, #2
 80020be:	2181      	movs	r1, #129	; 0x81
 80020c0:	f000 fef8 	bl	8002eb4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	e7d0      	b.n	800206a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80020c8:	2340      	movs	r3, #64	; 0x40
 80020ca:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80020ce:	2101      	movs	r1, #1
 80020d0:	4620      	mov	r0, r4
 80020d2:	f000 ff55 	bl	8002f80 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80020d6:	4628      	mov	r0, r5
 80020d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80020da:	2001      	movs	r0, #1
}
 80020dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020de <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80020de:	b119      	cbz	r1, 80020e8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80020e0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80020e4:	2000      	movs	r0, #0
 80020e6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80020e8:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80020ea:	4770      	bx	lr

080020ec <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80020ec:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80020f0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80020f2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80020f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80020fa:	4770      	bx	lr

080020fc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80020fc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002100:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002102:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002106:	4770      	bx	lr

08002108 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002108:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800210c:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 800210e:	b172      	cbz	r2, 800212e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002110:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002114:	2301      	movs	r3, #1
 8002116:	b964      	cbnz	r4, 8002132 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002118:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800211c:	2181      	movs	r1, #129	; 0x81
 800211e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002122:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002126:	f000 ff1d 	bl	8002f64 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800212a:	4620      	mov	r0, r4
 800212c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800212e:	2002      	movs	r0, #2
 8002130:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002132:	4618      	mov	r0, r3
  }
}
 8002134:	bd10      	pop	{r4, pc}

08002136 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002136:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800213a:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800213c:	b162      	cbz	r2, 8002158 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800213e:	7c04      	ldrb	r4, [r0, #16]
 8002140:	b944      	cbnz	r4, 8002154 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002142:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002146:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800214a:	2101      	movs	r1, #1
 800214c:	f000 ff18 	bl	8002f80 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002150:	2000      	movs	r0, #0
 8002152:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002154:	2340      	movs	r3, #64	; 0x40
 8002156:	e7f6      	b.n	8002146 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002158:	2002      	movs	r0, #2
  }
}
 800215a:	bd10      	pop	{r4, pc}

0800215c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800215c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800215e:	b180      	cbz	r0, 8002182 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002160:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002164:	b113      	cbz	r3, 800216c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800216c:	b109      	cbz	r1, 8002172 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800216e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002172:	2301      	movs	r3, #1
  pdev->id = id;
 8002174:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002176:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800217a:	f000 fe45 	bl	8002e08 <USBD_LL_Init>
  
  return USBD_OK; 
 800217e:	2000      	movs	r0, #0
 8002180:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002182:	2002      	movs	r0, #2
}
 8002184:	bd08      	pop	{r3, pc}

08002186 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002186:	b119      	cbz	r1, 8002190 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002188:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800218c:	2000      	movs	r0, #0
 800218e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002190:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002192:	4770      	bx	lr

08002194 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002194:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002196:	f000 fe7f 	bl	8002e98 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800219a:	2000      	movs	r0, #0
 800219c:	bd08      	pop	{r3, pc}

0800219e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800219e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80021a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021a4:	b90b      	cbnz	r3, 80021aa <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80021a6:	2002      	movs	r0, #2
 80021a8:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4798      	blx	r3
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d1f9      	bne.n	80021a6 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80021b2:	bd08      	pop	{r3, pc}

080021b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80021b4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80021b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4798      	blx	r3
  return USBD_OK;
}
 80021be:	2000      	movs	r0, #0
 80021c0:	bd08      	pop	{r3, pc}

080021c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80021c2:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80021c4:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80021c8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80021ca:	4628      	mov	r0, r5
 80021cc:	f000 fa65 	bl	800269a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80021d0:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80021d2:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80021d6:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80021da:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80021de:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80021e2:	f001 031f 	and.w	r3, r1, #31
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d00e      	beq.n	8002208 <USBD_LL_SetupStage+0x46>
 80021ea:	d307      	bcc.n	80021fc <USBD_LL_SetupStage+0x3a>
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d010      	beq.n	8002212 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80021f0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80021f4:	4620      	mov	r0, r4
 80021f6:	f000 fe7b 	bl	8002ef0 <USBD_LL_StallEP>
    break;
 80021fa:	e003      	b.n	8002204 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80021fc:	4629      	mov	r1, r5
 80021fe:	4620      	mov	r0, r4
 8002200:	f000 f8d6 	bl	80023b0 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002204:	2000      	movs	r0, #0
 8002206:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002208:	4629      	mov	r1, r5
 800220a:	4620      	mov	r0, r4
 800220c:	f000 f9ca 	bl	80025a4 <USBD_StdItfReq>
    break;
 8002210:	e7f8      	b.n	8002204 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002212:	4629      	mov	r1, r5
 8002214:	4620      	mov	r0, r4
 8002216:	f000 f9dd 	bl	80025d4 <USBD_StdEPReq>
    break;
 800221a:	e7f3      	b.n	8002204 <USBD_LL_SetupStage+0x42>

0800221c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800221c:	b538      	push	{r3, r4, r5, lr}
 800221e:	4604      	mov	r4, r0
 8002220:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002222:	bb11      	cbnz	r1, 800226a <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002224:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002228:	2b03      	cmp	r3, #3
 800222a:	d10f      	bne.n	800224c <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800222c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002230:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002234:	4293      	cmp	r3, r2
 8002236:	d90b      	bls.n	8002250 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002238:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800223a:	429a      	cmp	r2, r3
 800223c:	bf28      	it	cs
 800223e:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002240:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002244:	b292      	uxth	r2, r2
 8002246:	4629      	mov	r1, r5
 8002248:	f000 fa7b 	bl	8002742 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800224c:	2000      	movs	r0, #0
 800224e:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002250:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	b123      	cbz	r3, 8002262 <USBD_LL_DataOutStage+0x46>
 8002258:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800225c:	2a03      	cmp	r2, #3
 800225e:	d100      	bne.n	8002262 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002260:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002262:	4620      	mov	r0, r4
 8002264:	f000 fa75 	bl	8002752 <USBD_CtlSendStatus>
 8002268:	e7f0      	b.n	800224c <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800226a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0eb      	beq.n	800224c <USBD_LL_DataOutStage+0x30>
 8002274:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002278:	2a03      	cmp	r2, #3
 800227a:	d1e7      	bne.n	800224c <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800227c:	4798      	blx	r3
 800227e:	e7e5      	b.n	800224c <USBD_LL_DataOutStage+0x30>

08002280 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4613      	mov	r3, r2
 8002284:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002286:	460e      	mov	r6, r1
 8002288:	2900      	cmp	r1, #0
 800228a:	d13d      	bne.n	8002308 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800228c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002290:	2a02      	cmp	r2, #2
 8002292:	d10f      	bne.n	80022b4 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002294:	69c5      	ldr	r5, [r0, #28]
 8002296:	6a02      	ldr	r2, [r0, #32]
 8002298:	4295      	cmp	r5, r2
 800229a:	d914      	bls.n	80022c6 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800229c:	1aaa      	subs	r2, r5, r2
 800229e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80022a0:	4619      	mov	r1, r3
 80022a2:	b292      	uxth	r2, r2
 80022a4:	f000 fa36 	bl	8002714 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80022a8:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80022aa:	461a      	mov	r2, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	4620      	mov	r0, r4
 80022b0:	f000 fe66 	bl	8002f80 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80022b4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d102      	bne.n	80022c2 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80022c2:	2000      	movs	r0, #0
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80022c6:	6983      	ldr	r3, [r0, #24]
 80022c8:	fbb3 f5f2 	udiv	r5, r3, r2
 80022cc:	fb02 3515 	mls	r5, r2, r5, r3
 80022d0:	b965      	cbnz	r5, 80022ec <USBD_LL_DataInStage+0x6c>
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d80a      	bhi.n	80022ec <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80022d6:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80022da:	4293      	cmp	r3, r2
 80022dc:	d206      	bcs.n	80022ec <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80022de:	462a      	mov	r2, r5
 80022e0:	f000 fa18 	bl	8002714 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80022e4:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80022e8:	462b      	mov	r3, r5
 80022ea:	e7de      	b.n	80022aa <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80022ec:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	b12b      	cbz	r3, 8002300 <USBD_LL_DataInStage+0x80>
 80022f4:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80022f8:	2a03      	cmp	r2, #3
 80022fa:	d101      	bne.n	8002300 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80022fc:	4620      	mov	r0, r4
 80022fe:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002300:	4620      	mov	r0, r4
 8002302:	f000 fa31 	bl	8002768 <USBD_CtlReceiveStatus>
 8002306:	e7d5      	b.n	80022b4 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002308:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0d7      	beq.n	80022c2 <USBD_LL_DataInStage+0x42>
 8002312:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002316:	2a03      	cmp	r2, #3
 8002318:	d1d3      	bne.n	80022c2 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800231a:	4798      	blx	r3
 800231c:	e7d1      	b.n	80022c2 <USBD_LL_DataInStage+0x42>

0800231e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800231e:	2200      	movs	r2, #0
{
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002324:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002326:	4611      	mov	r1, r2
 8002328:	2340      	movs	r3, #64	; 0x40
 800232a:	f000 fdc3 	bl	8002eb4 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800232e:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002330:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002334:	2200      	movs	r2, #0
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	4620      	mov	r0, r4
 800233a:	f000 fdbb 	bl	8002eb4 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800233e:	2301      	movs	r3, #1
 8002340:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002344:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002348:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800234a:	b12b      	cbz	r3, 8002358 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800234c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002350:	7921      	ldrb	r1, [r4, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4620      	mov	r0, r4
 8002356:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002358:	2000      	movs	r0, #0
 800235a:	bd38      	pop	{r3, r4, r5, pc}

0800235c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800235c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800235e:	2000      	movs	r0, #0
 8002360:	4770      	bx	lr

08002362 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002362:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002366:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800236a:	2304      	movs	r3, #4
 800236c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002370:	2000      	movs	r0, #0
 8002372:	4770      	bx	lr

08002374 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002374:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002378:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800237c:	2000      	movs	r0, #0
 800237e:	4770      	bx	lr

08002380 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002380:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002382:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002386:	2a03      	cmp	r2, #3
 8002388:	d104      	bne.n	8002394 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800238a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	b103      	cbz	r3, 8002394 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002392:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002394:	2000      	movs	r0, #0
 8002396:	bd08      	pop	{r3, pc}

08002398 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002398:	b510      	push	{r4, lr}
 800239a:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	f000 fda7 	bl	8002ef0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80023a2:	4620      	mov	r0, r4
}
 80023a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80023a8:	2100      	movs	r1, #0
 80023aa:	f000 bda1 	b.w	8002ef0 <USBD_LL_StallEP>
	...

080023b0 <USBD_StdDevReq>:
{
 80023b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80023b2:	784b      	ldrb	r3, [r1, #1]
{
 80023b4:	4604      	mov	r4, r0
 80023b6:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d879      	bhi.n	80024b0 <USBD_StdDevReq+0x100>
 80023bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023c0:	00e500c9 	.word	0x00e500c9
 80023c4:	00d90078 	.word	0x00d90078
 80023c8:	006d0078 	.word	0x006d0078
 80023cc:	0078000a 	.word	0x0078000a
 80023d0:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80023d4:	884b      	ldrh	r3, [r1, #2]
 80023d6:	0a1a      	lsrs	r2, r3, #8
 80023d8:	3a01      	subs	r2, #1
 80023da:	2a06      	cmp	r2, #6
 80023dc:	d868      	bhi.n	80024b0 <USBD_StdDevReq+0x100>
 80023de:	e8df f002 	tbb	[pc, r2]
 80023e2:	1c04      	.short	0x1c04
 80023e4:	49676729 	.word	0x49676729
 80023e8:	52          	.byte	0x52
 80023e9:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80023ea:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80023ee:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80023f0:	f10d 0106 	add.w	r1, sp, #6
 80023f4:	7c20      	ldrb	r0, [r4, #16]
 80023f6:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80023f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d067      	beq.n	80024d0 <USBD_StdDevReq+0x120>
 8002400:	88eb      	ldrh	r3, [r5, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d064      	beq.n	80024d0 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002406:	429a      	cmp	r2, r3
 8002408:	bf28      	it	cs
 800240a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 800240c:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800240e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002412:	4620      	mov	r0, r4
 8002414:	f000 f971 	bl	80026fa <USBD_CtlSendData>
 8002418:	e05a      	b.n	80024d0 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800241a:	7c02      	ldrb	r2, [r0, #16]
 800241c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002420:	b932      	cbnz	r2, 8002430 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002424:	f10d 0006 	add.w	r0, sp, #6
 8002428:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800242a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800242c:	7043      	strb	r3, [r0, #1]
 800242e:	e7e3      	b.n	80023f8 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	e7f7      	b.n	8002424 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b05      	cmp	r3, #5
 8002438:	d83a      	bhi.n	80024b0 <USBD_StdDevReq+0x100>
 800243a:	e8df f003 	tbb	[pc, r3]
 800243e:	0703      	.short	0x0703
 8002440:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002444:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	e7d1      	b.n	80023f0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800244c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	e7cd      	b.n	80023f0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002454:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	e7c9      	b.n	80023f0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800245c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	e7c5      	b.n	80023f0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002464:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	e7c1      	b.n	80023f0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800246c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	e7bd      	b.n	80023f0 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002474:	7c03      	ldrb	r3, [r0, #16]
 8002476:	b9db      	cbnz	r3, 80024b0 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002478:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800247c:	f10d 0006 	add.w	r0, sp, #6
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	4798      	blx	r3
 8002484:	e7b8      	b.n	80023f8 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002486:	7c03      	ldrb	r3, [r0, #16]
 8002488:	b993      	cbnz	r3, 80024b0 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800248a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800248e:	f10d 0006 	add.w	r0, sp, #6
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002496:	2307      	movs	r3, #7
 8002498:	e7c8      	b.n	800242c <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800249a:	888b      	ldrh	r3, [r1, #4]
 800249c:	b943      	cbnz	r3, 80024b0 <USBD_StdDevReq+0x100>
 800249e:	88cb      	ldrh	r3, [r1, #6]
 80024a0:	b933      	cbnz	r3, 80024b0 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80024a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80024a6:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80024a8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80024aa:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80024ae:	d103      	bne.n	80024b8 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff ff71 	bl	8002398 <USBD_CtlError.constprop.0>
    break;
 80024b6:	e00b      	b.n	80024d0 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80024b8:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80024bc:	4629      	mov	r1, r5
 80024be:	f000 fd43 	bl	8002f48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80024c2:	4620      	mov	r0, r4
 80024c4:	f000 f945 	bl	8002752 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80024c8:	b12d      	cbz	r5, 80024d6 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80024ca:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80024cc:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80024d0:	2000      	movs	r0, #0
 80024d2:	b003      	add	sp, #12
 80024d4:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80024d6:	2301      	movs	r3, #1
 80024d8:	e7f8      	b.n	80024cc <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80024da:	7889      	ldrb	r1, [r1, #2]
 80024dc:	4d30      	ldr	r5, [pc, #192]	; (80025a0 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80024de:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80024e0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80024e2:	d8e5      	bhi.n	80024b0 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80024e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d00c      	beq.n	8002506 <USBD_StdDevReq+0x156>
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d1df      	bne.n	80024b0 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80024f0:	b9b1      	cbnz	r1, 8002520 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80024f2:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80024f4:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80024f6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80024fa:	f7ff fe5b 	bl	80021b4 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80024fe:	4620      	mov	r0, r4
 8002500:	f000 f927 	bl	8002752 <USBD_CtlSendStatus>
 8002504:	e7e4      	b.n	80024d0 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002506:	2900      	cmp	r1, #0
 8002508:	d0f9      	beq.n	80024fe <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800250a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800250c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800250e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002510:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fe42 	bl	800219e <USBD_SetClassConfig>
 800251a:	2802      	cmp	r0, #2
 800251c:	d1ef      	bne.n	80024fe <USBD_StdDevReq+0x14e>
 800251e:	e7c7      	b.n	80024b0 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002520:	6841      	ldr	r1, [r0, #4]
 8002522:	2901      	cmp	r1, #1
 8002524:	d0eb      	beq.n	80024fe <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002526:	b2c9      	uxtb	r1, r1
 8002528:	f7ff fe44 	bl	80021b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800252c:	7829      	ldrb	r1, [r5, #0]
 800252e:	6061      	str	r1, [r4, #4]
 8002530:	e7f0      	b.n	8002514 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002532:	88ca      	ldrh	r2, [r1, #6]
 8002534:	2a01      	cmp	r2, #1
 8002536:	d1bb      	bne.n	80024b0 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002538:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800253c:	2b02      	cmp	r3, #2
 800253e:	d003      	beq.n	8002548 <USBD_StdDevReq+0x198>
 8002540:	2b03      	cmp	r3, #3
 8002542:	d1b5      	bne.n	80024b0 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002544:	1d01      	adds	r1, r0, #4
 8002546:	e764      	b.n	8002412 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002548:	4601      	mov	r1, r0
 800254a:	2300      	movs	r3, #0
 800254c:	f841 3f08 	str.w	r3, [r1, #8]!
 8002550:	e75f      	b.n	8002412 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002552:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002556:	3b02      	subs	r3, #2
 8002558:	2b01      	cmp	r3, #1
 800255a:	d8a9      	bhi.n	80024b0 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800255c:	2301      	movs	r3, #1
 800255e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002560:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002564:	b10b      	cbz	r3, 800256a <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002566:	2303      	movs	r3, #3
 8002568:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800256a:	2202      	movs	r2, #2
 800256c:	f104 010c 	add.w	r1, r4, #12
 8002570:	e74f      	b.n	8002412 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002572:	884b      	ldrh	r3, [r1, #2]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d1ab      	bne.n	80024d0 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002578:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800257c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002580:	4629      	mov	r1, r5
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4620      	mov	r0, r4
 8002586:	4798      	blx	r3
 8002588:	e7b9      	b.n	80024fe <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800258a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800258e:	3b02      	subs	r3, #2
 8002590:	2b01      	cmp	r3, #1
 8002592:	d88d      	bhi.n	80024b0 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002594:	884b      	ldrh	r3, [r1, #2]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d19a      	bne.n	80024d0 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800259a:	2300      	movs	r3, #0
 800259c:	e7ec      	b.n	8002578 <USBD_StdDevReq+0x1c8>
 800259e:	bf00      	nop
 80025a0:	2000067d 	.word	0x2000067d

080025a4 <USBD_StdItfReq>:
{
 80025a4:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80025a6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80025aa:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80025ac:	2b03      	cmp	r3, #3
{
 80025ae:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80025b0:	d10d      	bne.n	80025ce <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80025b2:	790b      	ldrb	r3, [r1, #4]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d80a      	bhi.n	80025ce <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80025b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80025c0:	88eb      	ldrh	r3, [r5, #6]
 80025c2:	b913      	cbnz	r3, 80025ca <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f000 f8c4 	bl	8002752 <USBD_CtlSendStatus>
}
 80025ca:	2000      	movs	r0, #0
 80025cc:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80025ce:	f7ff fee3 	bl	8002398 <USBD_CtlError.constprop.0>
    break;
 80025d2:	e7fa      	b.n	80025ca <USBD_StdItfReq+0x26>

080025d4 <USBD_StdEPReq>:
{
 80025d4:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80025d6:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80025d8:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80025da:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80025de:	2a20      	cmp	r2, #32
{
 80025e0:	4604      	mov	r4, r0
 80025e2:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80025e4:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80025e6:	d105      	bne.n	80025f4 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80025e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4798      	blx	r3
}
 80025f0:	2000      	movs	r0, #0
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80025f4:	784a      	ldrb	r2, [r1, #1]
 80025f6:	2a01      	cmp	r2, #1
 80025f8:	d01c      	beq.n	8002634 <USBD_StdEPReq+0x60>
 80025fa:	d32a      	bcc.n	8002652 <USBD_StdEPReq+0x7e>
 80025fc:	2a03      	cmp	r2, #3
 80025fe:	d1f7      	bne.n	80025f0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002600:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002604:	2a02      	cmp	r2, #2
 8002606:	d040      	beq.n	800268a <USBD_StdEPReq+0xb6>
 8002608:	2a03      	cmp	r2, #3
 800260a:	d002      	beq.n	8002612 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 800260c:	f7ff fec4 	bl	8002398 <USBD_CtlError.constprop.0>
      break;
 8002610:	e7ee      	b.n	80025f0 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002612:	884a      	ldrh	r2, [r1, #2]
 8002614:	b922      	cbnz	r2, 8002620 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002616:	065e      	lsls	r6, r3, #25
 8002618:	d002      	beq.n	8002620 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800261a:	4619      	mov	r1, r3
 800261c:	f000 fc68 	bl	8002ef0 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002620:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002624:	4629      	mov	r1, r5
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4620      	mov	r0, r4
 800262a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800262c:	4620      	mov	r0, r4
 800262e:	f000 f890 	bl	8002752 <USBD_CtlSendStatus>
 8002632:	e7dd      	b.n	80025f0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002634:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002638:	2a02      	cmp	r2, #2
 800263a:	d026      	beq.n	800268a <USBD_StdEPReq+0xb6>
 800263c:	2a03      	cmp	r2, #3
 800263e:	d1e5      	bne.n	800260c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002640:	884a      	ldrh	r2, [r1, #2]
 8002642:	2a00      	cmp	r2, #0
 8002644:	d1d4      	bne.n	80025f0 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002646:	0659      	lsls	r1, r3, #25
 8002648:	d0f0      	beq.n	800262c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800264a:	4619      	mov	r1, r3
 800264c:	f000 fc5e 	bl	8002f0c <USBD_LL_ClearStallEP>
 8002650:	e7e6      	b.n	8002620 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002652:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002656:	2a02      	cmp	r2, #2
 8002658:	d017      	beq.n	800268a <USBD_StdEPReq+0xb6>
 800265a:	2a03      	cmp	r2, #3
 800265c:	d1d6      	bne.n	800260c <USBD_StdEPReq+0x38>
 800265e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002662:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002666:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800266a:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800266c:	bf14      	ite	ne
 800266e:	3514      	addne	r5, #20
 8002670:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002674:	f000 fc58 	bl	8002f28 <USBD_LL_IsStallEP>
 8002678:	b168      	cbz	r0, 8002696 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800267a:	2301      	movs	r3, #1
 800267c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800267e:	2202      	movs	r2, #2
 8002680:	4629      	mov	r1, r5
 8002682:	4620      	mov	r0, r4
 8002684:	f000 f839 	bl	80026fa <USBD_CtlSendData>
      break;
 8002688:	e7b2      	b.n	80025f0 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800268a:	065a      	lsls	r2, r3, #25
 800268c:	d0b0      	beq.n	80025f0 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800268e:	4619      	mov	r1, r3
 8002690:	f000 fc2e 	bl	8002ef0 <USBD_LL_StallEP>
 8002694:	e7ac      	b.n	80025f0 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002696:	6028      	str	r0, [r5, #0]
 8002698:	e7f1      	b.n	800267e <USBD_StdEPReq+0xaa>

0800269a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800269a:	780b      	ldrb	r3, [r1, #0]
 800269c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800269e:	784b      	ldrb	r3, [r1, #1]
 80026a0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80026a2:	78ca      	ldrb	r2, [r1, #3]
 80026a4:	788b      	ldrb	r3, [r1, #2]
 80026a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026aa:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80026ac:	794a      	ldrb	r2, [r1, #5]
 80026ae:	790b      	ldrb	r3, [r1, #4]
 80026b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026b4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80026b6:	79ca      	ldrb	r2, [r1, #7]
 80026b8:	798b      	ldrb	r3, [r1, #6]
 80026ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026be:	80c3      	strh	r3, [r0, #6]
 80026c0:	4770      	bx	lr

080026c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80026c2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80026c4:	b188      	cbz	r0, 80026ea <USBD_GetString+0x28>
 80026c6:	4605      	mov	r5, r0
 80026c8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80026ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2c00      	cmp	r4, #0
 80026d2:	d1f9      	bne.n	80026c8 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	3302      	adds	r3, #2
 80026d8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80026da:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80026dc:	2303      	movs	r3, #3
 80026de:	704b      	strb	r3, [r1, #1]
 80026e0:	2302      	movs	r3, #2
 80026e2:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80026e4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80026e8:	b905      	cbnz	r5, 80026ec <USBD_GetString+0x2a>
 80026ea:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	54cd      	strb	r5, [r1, r3]
 80026f0:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80026f2:	3302      	adds	r3, #2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	548c      	strb	r4, [r1, r2]
 80026f8:	e7f4      	b.n	80026e4 <USBD_GetString+0x22>

080026fa <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80026fa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80026fc:	2202      	movs	r2, #2
{
 80026fe:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002700:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002704:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002706:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002708:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800270a:	2100      	movs	r1, #0
 800270c:	f000 fc2a 	bl	8002f64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002710:	2000      	movs	r0, #0
 8002712:	bd10      	pop	{r4, pc}

08002714 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002714:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002716:	4613      	mov	r3, r2
 8002718:	460a      	mov	r2, r1
 800271a:	2100      	movs	r1, #0
 800271c:	f000 fc22 	bl	8002f64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002720:	2000      	movs	r0, #0
 8002722:	bd08      	pop	{r3, pc}

08002724 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002724:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002726:	2203      	movs	r2, #3
{
 8002728:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800272a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800272e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002732:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002734:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002738:	2100      	movs	r1, #0
 800273a:	f000 fc21 	bl	8002f80 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800273e:	2000      	movs	r0, #0
 8002740:	bd10      	pop	{r4, pc}

08002742 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002742:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002744:	4613      	mov	r3, r2
 8002746:	460a      	mov	r2, r1
 8002748:	2100      	movs	r1, #0
 800274a:	f000 fc19 	bl	8002f80 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800274e:	2000      	movs	r0, #0
 8002750:	bd08      	pop	{r3, pc}

08002752 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002752:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002754:	2304      	movs	r3, #4
 8002756:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800275a:	2300      	movs	r3, #0
 800275c:	461a      	mov	r2, r3
 800275e:	4619      	mov	r1, r3
 8002760:	f000 fc00 	bl	8002f64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002764:	2000      	movs	r0, #0
 8002766:	bd08      	pop	{r3, pc}

08002768 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002768:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800276a:	2305      	movs	r3, #5
 800276c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002770:	2300      	movs	r3, #0
 8002772:	461a      	mov	r2, r3
 8002774:	4619      	mov	r1, r3
 8002776:	f000 fc03 	bl	8002f80 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800277a:	2000      	movs	r0, #0
 800277c:	bd08      	pop	{r3, pc}
	...

08002780 <sendCommand>:
void OLED_num_to_str(unsigned int value, unsigned char nDigit);


void sendCommand(uint8_t command_s)
{
	temp[0] = COMAND;
 8002780:	2300      	movs	r3, #0
{
 8002782:	b507      	push	{r0, r1, r2, lr}
	temp[0] = COMAND;
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <sendCommand+0x20>)
	temp[1] = command_s;
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp,2,100);
 8002786:	2178      	movs	r1, #120	; 0x78
	temp[0] = COMAND;
 8002788:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp,2,100);
 800278a:	2364      	movs	r3, #100	; 0x64
	temp[1] = command_s;
 800278c:	7050      	strb	r0, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp,2,100);
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4804      	ldr	r0, [pc, #16]	; (80027a4 <sendCommand+0x24>)
 8002792:	2302      	movs	r3, #2
 8002794:	f7fd ffe6 	bl	8000764 <HAL_I2C_Master_Transmit>
}
 8002798:	b003      	add	sp, #12
 800279a:	f85d fb04 	ldr.w	pc, [sp], #4
 800279e:	bf00      	nop
 80027a0:	2000067e 	.word	0x2000067e
 80027a4:	200008ac 	.word	0x200008ac

080027a8 <LCD_Goto>:
	temp[1] = data_s;
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp,2,100);
}

void LCD_Goto(unsigned char x, unsigned char y)
{
 80027a8:	b510      	push	{r4, lr}
 80027aa:	4604      	mov	r4, r0
	LCD_X = x;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <LCD_Goto+0x2c>)
 80027ae:	7018      	strb	r0, [r3, #0]
	LCD_Y = y;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <LCD_Goto+0x30>)
 80027b2:	7019      	strb	r1, [r3, #0]
	sendCommand(0xB0 + y);
 80027b4:	3950      	subs	r1, #80	; 0x50
 80027b6:	b2c8      	uxtb	r0, r1
 80027b8:	f7ff ffe2 	bl	8002780 <sendCommand>
	sendCommand(x & 0xf);
 80027bc:	f004 000f 	and.w	r0, r4, #15
 80027c0:	f7ff ffde 	bl	8002780 <sendCommand>
	sendCommand(0x10 | (x >> 4));
 80027c4:	0920      	lsrs	r0, r4, #4
 80027c6:	f040 0010 	orr.w	r0, r0, #16
}
 80027ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sendCommand(0x10 | (x >> 4));
 80027ce:	f7ff bfd7 	b.w	8002780 <sendCommand>
 80027d2:	bf00      	nop
 80027d4:	20000900 	.word	0x20000900
 80027d8:	20000904 	.word	0x20000904

080027dc <LCD_Char>:
}

void LCD_Char(unsigned int c)
{
	unsigned char x = 0;
	temp_char[0] = 0x40;
 80027dc:	2240      	movs	r2, #64	; 0x40
{
 80027de:	b513      	push	{r0, r1, r4, lr}
	for (x=0; x<5; x++)
	{
		temp_char[x+1] = LCD_Buffer[c*5+x];
 80027e0:	2400      	movs	r4, #0
	temp_char[0] = 0x40;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <LCD_Char+0x48>)
		temp_char[x+1] = LCD_Buffer[c*5+x];
 80027e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	temp_char[0] = 0x40;
 80027e8:	701a      	strb	r2, [r3, #0]
		temp_char[x+1] = LCD_Buffer[c*5+x];
 80027ea:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <LCD_Char+0x4c>)
 80027ec:	4410      	add	r0, r2
 80027ee:	191a      	adds	r2, r3, r4
 80027f0:	5d01      	ldrb	r1, [r0, r4]
 80027f2:	3401      	adds	r4, #1
	for (x=0; x<5; x++)
 80027f4:	2c05      	cmp	r4, #5
		temp_char[x+1] = LCD_Buffer[c*5+x];
 80027f6:	7051      	strb	r1, [r2, #1]
	for (x=0; x<5; x++)
 80027f8:	d1f9      	bne.n	80027ee <LCD_Char+0x12>
	}
	temp_char[6] = 0;
 80027fa:	2200      	movs	r2, #0
 80027fc:	719a      	strb	r2, [r3, #6]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_adress, temp_char, 7,1000);
 80027fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <LCD_Char+0x48>)
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2178      	movs	r1, #120	; 0x78
 8002808:	2307      	movs	r3, #7
 800280a:	4808      	ldr	r0, [pc, #32]	; (800282c <LCD_Char+0x50>)
 800280c:	f7fd ffaa 	bl	8000764 <HAL_I2C_Master_Transmit>

	LCD_X += 8;
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <LCD_Char+0x54>)
 8002812:	7813      	ldrb	r3, [r2, #0]
 8002814:	3308      	adds	r3, #8
 8002816:	b2db      	uxtb	r3, r3
	if(LCD_X>OLED_WIDTH)
 8002818:	2b80      	cmp	r3, #128	; 0x80
	LCD_X += 8;
 800281a:	bf94      	ite	ls
 800281c:	7013      	strbls	r3, [r2, #0]
	{
		LCD_X = OLED_DEFAULT_SPACE;
 800281e:	7014      	strbhi	r4, [r2, #0]
	}
}
 8002820:	b002      	add	sp, #8
 8002822:	bd10      	pop	{r4, pc}
 8002824:	20000680 	.word	0x20000680
 8002828:	20000117 	.word	0x20000117
 800282c:	200008ac 	.word	0x200008ac
 8002830:	20000900 	.word	0x20000900

08002834 <LCD_Clear>:
	LCD_Goto(0,0);
 8002834:	2100      	movs	r1, #0
{
 8002836:	b570      	push	{r4, r5, r6, lr}
	unsigned short y=0;
 8002838:	2600      	movs	r6, #0
	LCD_Goto(0,0);
 800283a:	4608      	mov	r0, r1
 800283c:	f7ff ffb4 	bl	80027a8 <LCD_Goto>
 8002840:	f44f 6480 	mov.w	r4, #1024	; 0x400
	unsigned short x=0;
 8002844:	4635      	mov	r5, r6
		x ++;
 8002846:	3501      	adds	r5, #1
		LCD_Char(' ');
 8002848:	2020      	movs	r0, #32
		x ++;
 800284a:	b2ad      	uxth	r5, r5
		LCD_Char(' ');
 800284c:	f7ff ffc6 	bl	80027dc <LCD_Char>
		if(x>OLED_WIDTH)
 8002850:	2d80      	cmp	r5, #128	; 0x80
 8002852:	d906      	bls.n	8002862 <LCD_Clear+0x2e>
			y++;
 8002854:	3601      	adds	r6, #1
 8002856:	b2b6      	uxth	r6, r6
			LCD_Goto(0,y);
 8002858:	b2f1      	uxtb	r1, r6
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff ffa4 	bl	80027a8 <LCD_Goto>
			x =0;
 8002860:	2500      	movs	r5, #0
 8002862:	3c01      	subs	r4, #1
 8002864:	b2a4      	uxth	r4, r4
	for (i=0; i<(OLED_BUFFERSIZE); i++) //(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)
 8002866:	2c00      	cmp	r4, #0
 8002868:	d1ed      	bne.n	8002846 <LCD_Clear+0x12>
	LCD_X =OLED_DEFAULT_SPACE;
 800286a:	2205      	movs	r2, #5
 800286c:	4b02      	ldr	r3, [pc, #8]	; (8002878 <LCD_Clear+0x44>)
 800286e:	701a      	strb	r2, [r3, #0]
	LCD_Y =0;
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <LCD_Clear+0x48>)
 8002872:	701c      	strb	r4, [r3, #0]
 8002874:	bd70      	pop	{r4, r5, r6, pc}
 8002876:	bf00      	nop
 8002878:	20000900 	.word	0x20000900
 800287c:	20000904 	.word	0x20000904

08002880 <OLED_string>:


void OLED_string(char *string)
{
 8002880:	b510      	push	{r4, lr}
 8002882:	1e44      	subs	r4, r0, #1
	while(*string != '\0')
 8002884:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002888:	b900      	cbnz	r0, 800288c <OLED_string+0xc>
	{
		LCD_Char(*string);
		string++;
	}
}
 800288a:	bd10      	pop	{r4, pc}
		LCD_Char(*string);
 800288c:	f7ff ffa6 	bl	80027dc <LCD_Char>
 8002890:	e7f8      	b.n	8002884 <OLED_string+0x4>

08002892 <OLED_num_to_str>:

void OLED_num_to_str(unsigned int value, unsigned char nDigit)
{
	switch(nDigit)
 8002892:	3901      	subs	r1, #1
{
 8002894:	b510      	push	{r4, lr}
 8002896:	4604      	mov	r4, r0
	switch(nDigit)
 8002898:	2904      	cmp	r1, #4
 800289a:	d836      	bhi.n	800290a <OLED_num_to_str+0x78>
 800289c:	e8df f001 	tbb	[pc, r1]
 80028a0:	0a16212b 	.word	0x0a16212b
 80028a4:	03          	.byte	0x03
 80028a5:	00          	.byte	0x00
	{
		case 5: LCD_Char(value/10000+48);
 80028a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80028aa:	fbb4 f0f0 	udiv	r0, r4, r0
 80028ae:	3030      	adds	r0, #48	; 0x30
 80028b0:	f7ff ff94 	bl	80027dc <LCD_Char>
		case 4: LCD_Char((value/1000)%10+48);
 80028b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028b8:	220a      	movs	r2, #10
 80028ba:	fbb4 f0f0 	udiv	r0, r4, r0
 80028be:	fbb0 f3f2 	udiv	r3, r0, r2
 80028c2:	fb02 0013 	mls	r0, r2, r3, r0
 80028c6:	3030      	adds	r0, #48	; 0x30
 80028c8:	f7ff ff88 	bl	80027dc <LCD_Char>
		case 3: LCD_Char((value/100)%10+48);
 80028cc:	2064      	movs	r0, #100	; 0x64
 80028ce:	220a      	movs	r2, #10
 80028d0:	fbb4 f0f0 	udiv	r0, r4, r0
 80028d4:	fbb0 f3f2 	udiv	r3, r0, r2
 80028d8:	fb02 0013 	mls	r0, r2, r3, r0
 80028dc:	3030      	adds	r0, #48	; 0x30
 80028de:	f7ff ff7d 	bl	80027dc <LCD_Char>
		case 2: LCD_Char((value/10)%10+48);
 80028e2:	230a      	movs	r3, #10
 80028e4:	fbb4 f2f3 	udiv	r2, r4, r3
 80028e8:	fbb2 f0f3 	udiv	r0, r2, r3
 80028ec:	fb03 2010 	mls	r0, r3, r0, r2
 80028f0:	3030      	adds	r0, #48	; 0x30
 80028f2:	f7ff ff73 	bl	80027dc <LCD_Char>
		case 1: LCD_Char(value%10+48);
 80028f6:	230a      	movs	r3, #10
 80028f8:	fbb4 f0f3 	udiv	r0, r4, r3
 80028fc:	fb03 4010 	mls	r0, r3, r0, r4
	}
}
 8002900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		case 1: LCD_Char(value%10+48);
 8002904:	3030      	adds	r0, #48	; 0x30
 8002906:	f7ff bf69 	b.w	80027dc <LCD_Char>
 800290a:	bd10      	pop	{r4, pc}

0800290c <OLED_init>:


void OLED_init(void)
{
 800290c:	b508      	push	{r3, lr}
		// Turn display off
		sendCommand(OLED_DISPLAYOFF);
 800290e:	20ae      	movs	r0, #174	; 0xae
 8002910:	f7ff ff36 	bl	8002780 <sendCommand>

		sendCommand(OLED_SETDISPLAYCLOCKDIV);
 8002914:	20d5      	movs	r0, #213	; 0xd5
 8002916:	f7ff ff33 	bl	8002780 <sendCommand>
		sendCommand(0x80);
 800291a:	2080      	movs	r0, #128	; 0x80
 800291c:	f7ff ff30 	bl	8002780 <sendCommand>

		sendCommand(OLED_SETMULTIPLEX);
 8002920:	20a8      	movs	r0, #168	; 0xa8
 8002922:	f7ff ff2d 	bl	8002780 <sendCommand>
		//sendCommand(0x1F);//128x32
		sendCommand(0x3F);//128x64
 8002926:	203f      	movs	r0, #63	; 0x3f
 8002928:	f7ff ff2a 	bl	8002780 <sendCommand>

		sendCommand(OLED_SETDISPLAYOFFSET);
 800292c:	20d3      	movs	r0, #211	; 0xd3
 800292e:	f7ff ff27 	bl	8002780 <sendCommand>
		sendCommand(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7ff ff24 	bl	8002780 <sendCommand>

		sendCommand(OLED_SETSTARTLINE | 0x00);//0
 8002938:	2040      	movs	r0, #64	; 0x40
 800293a:	f7ff ff21 	bl	8002780 <sendCommand>

		// We use internal charge pump
		sendCommand(OLED_CHARGEPUMP);
 800293e:	208d      	movs	r0, #141	; 0x8d
 8002940:	f7ff ff1e 	bl	8002780 <sendCommand>
		sendCommand(0x14);
 8002944:	2014      	movs	r0, #20
 8002946:	f7ff ff1b 	bl	8002780 <sendCommand>

		// Horizontal memory mode
		sendCommand(OLED_MEMORYMODE);
 800294a:	2020      	movs	r0, #32
 800294c:	f7ff ff18 	bl	8002780 <sendCommand>
		sendCommand(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f7ff ff15 	bl	8002780 <sendCommand>

		sendCommand(OLED_SEGREMAP | 0x1);
 8002956:	20a1      	movs	r0, #161	; 0xa1
 8002958:	f7ff ff12 	bl	8002780 <sendCommand>

		sendCommand(OLED_COMSCANDEC);
 800295c:	20c8      	movs	r0, #200	; 0xc8
 800295e:	f7ff ff0f 	bl	8002780 <sendCommand>

		sendCommand(OLED_SETCOMPINS);
 8002962:	20da      	movs	r0, #218	; 0xda
 8002964:	f7ff ff0c 	bl	8002780 <sendCommand>
		//sendCommand(0x02);//128x32
		sendCommand(0x12);//128x64
 8002968:	2012      	movs	r0, #18
 800296a:	f7ff ff09 	bl	8002780 <sendCommand>

		// Max contrast
		sendCommand(OLED_SETCONTRAST);
 800296e:	2081      	movs	r0, #129	; 0x81
 8002970:	f7ff ff06 	bl	8002780 <sendCommand>
		//sendCommand(0x0F);//0xCF
		sendCommand(0xCF);//0xCF
 8002974:	20cf      	movs	r0, #207	; 0xcf
 8002976:	f7ff ff03 	bl	8002780 <sendCommand>

		sendCommand(OLED_SETPRECHARGE);
 800297a:	20d9      	movs	r0, #217	; 0xd9
 800297c:	f7ff ff00 	bl	8002780 <sendCommand>
		sendCommand(0xF1);
 8002980:	20f1      	movs	r0, #241	; 0xf1
 8002982:	f7ff fefd 	bl	8002780 <sendCommand>

		sendCommand(OLED_SETVCOMDETECT);
 8002986:	20db      	movs	r0, #219	; 0xdb
 8002988:	f7ff fefa 	bl	8002780 <sendCommand>
		//sendCommand(0x10);//0x40
		sendCommand(0x40);//0x40
 800298c:	2040      	movs	r0, #64	; 0x40
 800298e:	f7ff fef7 	bl	8002780 <sendCommand>

		sendCommand(OLED_DISPLAYALLON_RESUME);
 8002992:	20a4      	movs	r0, #164	; 0xa4
 8002994:	f7ff fef4 	bl	8002780 <sendCommand>

		// Non-inverted display
		sendCommand(OLED_NORMALDISPLAY);
 8002998:	20a6      	movs	r0, #166	; 0xa6
 800299a:	f7ff fef1 	bl	8002780 <sendCommand>

		// Turn display back on
		sendCommand(OLED_DISPLAYON);
}
 800299e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sendCommand(OLED_DISPLAYON);
 80029a2:	20af      	movs	r0, #175	; 0xaf
 80029a4:	f7ff beec 	b.w	8002780 <sendCommand>

080029a8 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80029ac:	b530      	push	{r4, r5, lr}
 80029ae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029b0:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029b2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029b4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029b8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029be:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029c0:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029c2:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c6:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029c8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ca:	f7fe fb8b 	bl	80010e4 <HAL_RCC_OscConfig>
 80029ce:	b100      	cbz	r0, 80029d2 <SystemClock_Config+0x2a>
 80029d0:	e7fe      	b.n	80029d0 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d2:	230f      	movs	r3, #15
 80029d4:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029da:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029dc:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029de:	4621      	mov	r1, r4
 80029e0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e2:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029e4:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029e6:	f7fe fd45 	bl	8001474 <HAL_RCC_ClockConfig>
 80029ea:	b100      	cbz	r0, 80029ee <SystemClock_Config+0x46>
 80029ec:	e7fe      	b.n	80029ec <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80029ee:	2310      	movs	r3, #16
 80029f0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80029f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f6:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80029f8:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029fa:	f7fe fdf5 	bl	80015e8 <HAL_RCCEx_PeriphCLKConfig>
 80029fe:	4604      	mov	r4, r0
 8002a00:	b100      	cbz	r0, 8002a04 <SystemClock_Config+0x5c>
 8002a02:	e7fe      	b.n	8002a02 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002a04:	f7fe fdda 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 8002a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a10:	f7fd fc50 	bl	80002b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002a14:	2004      	movs	r0, #4
 8002a16:	f7fd fc63 	bl	80002e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a22:	f7fd fc07 	bl	8000234 <HAL_NVIC_SetPriority>
}
 8002a26:	b015      	add	sp, #84	; 0x54
 8002a28:	bd30      	pop	{r4, r5, pc}
	...

08002a2c <main>:
{
 8002a2c:	b500      	push	{lr}
 8002a2e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002a30:	f7fd fbb8 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8002a34:	f7ff ffb8 	bl	80029a8 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a38:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <main+0x100>)
  hi2c1.Instance = I2C1;
 8002a3a:	483d      	ldr	r0, [pc, #244]	; (8002b30 <main+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3c:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.ClockSpeed = 100000;
 8002a3e:	4c3d      	ldr	r4, [pc, #244]	; (8002b34 <main+0x108>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	f042 0220 	orr.w	r2, r2, #32
 8002a44:	619a      	str	r2, [r3, #24]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	f002 0220 	and.w	r2, r2, #32
 8002a4c:	9201      	str	r2, [sp, #4]
 8002a4e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	f042 0204 	orr.w	r2, r2, #4
 8002a56:	619a      	str	r2, [r3, #24]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	f002 0204 	and.w	r2, r2, #4
 8002a5e:	9202      	str	r2, [sp, #8]
 8002a60:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	f042 0208 	orr.w	r2, r2, #8
 8002a68:	619a      	str	r2, [r3, #24]
 8002a6a:	699b      	ldr	r3, [r3, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	9303      	str	r3, [sp, #12]
 8002a76:	9b03      	ldr	r3, [sp, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8002a78:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <main+0x10c>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.ClockSpeed = 100000;
 8002a7c:	e880 0018 	stmia.w	r0, {r3, r4}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a80:	2300      	movs	r3, #0
 8002a82:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a84:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a86:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a88:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a8a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a8c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a8e:	f7fd fde9 	bl	8000664 <HAL_I2C_Init>
 8002a92:	4604      	mov	r4, r0
 8002a94:	b100      	cbz	r0, 8002a98 <main+0x6c>
 8002a96:	e7fe      	b.n	8002a96 <main+0x6a>
  MX_USB_DEVICE_Init();
 8002a98:	f000 f906 	bl	8002ca8 <MX_USB_DEVICE_Init>
  HAL_Delay(100);
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	f7fd fba5 	bl	80001ec <HAL_Delay>
  	OLED_init();
 8002aa2:	f7ff ff33 	bl	800290c <OLED_init>
  	LCD_Clear();
 8002aa6:	f7ff fec5 	bl	8002834 <LCD_Clear>
  	LCD_Goto(0,0);
 8002aaa:	4621      	mov	r1, r4
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7ff fe7b 	bl	80027a8 <LCD_Goto>
  	OLED_string("-----------");
 8002ab2:	4822      	ldr	r0, [pc, #136]	; (8002b3c <main+0x110>)
 8002ab4:	f7ff fee4 	bl	8002880 <OLED_string>
  	LCD_Goto(0,1);
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff fe74 	bl	80027a8 <LCD_Goto>
  	OLED_string("-----------");
 8002ac0:	481e      	ldr	r0, [pc, #120]	; (8002b3c <main+0x110>)
 8002ac2:	f7ff fedd 	bl	8002880 <OLED_string>
  	LCD_Goto(0,2);
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff fe6d 	bl	80027a8 <LCD_Goto>
  	OLED_string("-----------");
 8002ace:	481b      	ldr	r0, [pc, #108]	; (8002b3c <main+0x110>)
 8002ad0:	f7ff fed6 	bl	8002880 <OLED_string>
  	LCD_Goto(0,3);
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f7ff fe66 	bl	80027a8 <LCD_Goto>
  	OLED_string("-----------");
 8002adc:	4817      	ldr	r0, [pc, #92]	; (8002b3c <main+0x110>)
 8002ade:	f7ff fecf 	bl	8002880 <OLED_string>
  	LCD_Goto(0,4);
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fe5f 	bl	80027a8 <LCD_Goto>
  	OLED_string("-----------");
 8002aea:	4814      	ldr	r0, [pc, #80]	; (8002b3c <main+0x110>)
 8002aec:	f7ff fec8 	bl	8002880 <OLED_string>
  	sprintf (str_tx,"USB TRANSMIT\r\n");
 8002af0:	4913      	ldr	r1, [pc, #76]	; (8002b40 <main+0x114>)
 8002af2:	a804      	add	r0, sp, #16
 8002af4:	f000 fafa 	bl	80030ec <strcpy>
	  	OLED_num_to_str(gg++,5);
 8002af8:	4c12      	ldr	r4, [pc, #72]	; (8002b44 <main+0x118>)
	  LCD_Goto(52,5);
 8002afa:	2105      	movs	r1, #5
 8002afc:	2034      	movs	r0, #52	; 0x34
 8002afe:	f7ff fe53 	bl	80027a8 <LCD_Goto>
	  	OLED_num_to_str(gg++,5);
 8002b02:	8820      	ldrh	r0, [r4, #0]
 8002b04:	2105      	movs	r1, #5
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	8023      	strh	r3, [r4, #0]
 8002b0a:	f7ff fec2 	bl	8002892 <OLED_num_to_str>
	  HAL_Delay(100);
 8002b0e:	2064      	movs	r0, #100	; 0x64
 8002b10:	f7fd fb6c 	bl	80001ec <HAL_Delay>
	  CDC_Transmit_FS((uint8_t*)str_tx, strlen(str_tx));
 8002b14:	a804      	add	r0, sp, #16
 8002b16:	f7fd fb19 	bl	800014c <strlen>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	a804      	add	r0, sp, #16
 8002b1e:	f000 f905 	bl	8002d2c <CDC_Transmit_FS>
	  	  HAL_Delay(100);
 8002b22:	2064      	movs	r0, #100	; 0x64
 8002b24:	f7fd fb62 	bl	80001ec <HAL_Delay>
 8002b28:	e7e7      	b.n	8002afa <main+0xce>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	200008ac 	.word	0x200008ac
 8002b34:	000186a0 	.word	0x000186a0
 8002b38:	40005400 	.word	0x40005400
 8002b3c:	08003124 	.word	0x08003124
 8002b40:	08003130 	.word	0x08003130
 8002b44:	20000902 	.word	0x20000902

08002b48 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002b48:	e7fe      	b.n	8002b48 <_Error_Handler>
	...

08002b4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_MspInit+0x98>)
{
 8002b4e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b50:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b52:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	619a      	str	r2, [r3, #24]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	f002 0201 	and.w	r2, r2, #1
 8002b60:	9200      	str	r2, [sp, #0]
 8002b62:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b6a:	61da      	str	r2, [r3, #28]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b76:	f7fd fb4b 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f06f 000b 	mvn.w	r0, #11
 8002b80:	4611      	mov	r1, r2
 8002b82:	f7fd fb57 	bl	8000234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f06f 000a 	mvn.w	r0, #10
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	f7fd fb51 	bl	8000234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	f06f 0009 	mvn.w	r0, #9
 8002b98:	4611      	mov	r1, r2
 8002b9a:	f7fd fb4b 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f06f 0004 	mvn.w	r0, #4
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	f7fd fb45 	bl	8000234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	f06f 0003 	mvn.w	r0, #3
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	f7fd fb3f 	bl	8000234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f06f 0001 	mvn.w	r0, #1
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	f7fd fb39 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f7fd fb33 	bl	8000234 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bce:	4a06      	ldr	r2, [pc, #24]	; (8002be8 <HAL_MspInit+0x9c>)
 8002bd0:	6853      	ldr	r3, [r2, #4]
 8002bd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bda:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bdc:	b003      	add	sp, #12
 8002bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010000 	.word	0x40010000

08002bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002bee:	6802      	ldr	r2, [r0, #0]
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_I2C_MspInit+0x38>)
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d113      	bne.n	8002c1e <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bf6:	23c0      	movs	r3, #192	; 0xc0
 8002bf8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfa:	2312      	movs	r3, #18
 8002bfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	a902      	add	r1, sp, #8
 8002c02:	4809      	ldr	r0, [pc, #36]	; (8002c28 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f7fd fb7d 	bl	8000304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_I2C_MspInit+0x40>)
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c12:	61da      	str	r2, [r3, #28]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c1e:	b007      	add	sp, #28
 8002c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c24:	40005400 	.word	0x40005400
 8002c28:	40010c00 	.word	0x40010c00
 8002c2c:	40021000 	.word	0x40021000

08002c30 <NMI_Handler>:
 8002c30:	4770      	bx	lr

08002c32 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c32:	e7fe      	b.n	8002c32 <HardFault_Handler>

08002c34 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002c34:	e7fe      	b.n	8002c34 <MemManage_Handler>

08002c36 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002c36:	e7fe      	b.n	8002c36 <BusFault_Handler>

08002c38 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002c38:	e7fe      	b.n	8002c38 <UsageFault_Handler>

08002c3a <SVC_Handler>:
 8002c3a:	4770      	bx	lr

08002c3c <DebugMon_Handler>:
 8002c3c:	4770      	bx	lr

08002c3e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002c3e:	4770      	bx	lr

08002c40 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c42:	f7fd fac1 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002c4a:	f7fd bb56 	b.w	80002fa <HAL_SYSTICK_IRQHandler>
	...

08002c50 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c50:	4801      	ldr	r0, [pc, #4]	; (8002c58 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002c52:	f7fd bf6b 	b.w	8000b2c <HAL_PCD_IRQHandler>
 8002c56:	bf00      	nop
 8002c58:	200012fc 	.word	0x200012fc

08002c5c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <SystemInit+0x40>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <SystemInit+0x44>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c78:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c80:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002c88:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <SystemInit+0x48>)
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	f8ff0000 	.word	0xf8ff0000
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002ca8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002caa:	4c09      	ldr	r4, [pc, #36]	; (8002cd0 <MX_USB_DEVICE_Init+0x28>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	4909      	ldr	r1, [pc, #36]	; (8002cd4 <MX_USB_DEVICE_Init+0x2c>)
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7ff fa53 	bl	800215c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <MX_USB_DEVICE_Init+0x30>)
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff fa64 	bl	8002186 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	4906      	ldr	r1, [pc, #24]	; (8002cdc <MX_USB_DEVICE_Init+0x34>)
 8002cc2:	f7ff fa0c 	bl	80020de <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8002cc6:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002ccc:	f7ff ba62 	b.w	8002194 <USBD_Start>
 8002cd0:	20000908 	.word	0x20000908
 8002cd4:	2000062c 	.word	0x2000062c
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	2000061c 	.word	0x2000061c

08002ce0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	4770      	bx	lr

08002ce4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	4770      	bx	lr

08002ce8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002ce8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002cea:	4c05      	ldr	r4, [pc, #20]	; (8002d00 <CDC_Receive_FS+0x18>)
 8002cec:	4601      	mov	r1, r0
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7ff fa04 	bl	80020fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff fa1e 	bl	8002136 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000908 	.word	0x20000908

08002d04 <CDC_Init_FS>:
{
 8002d04:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002d06:	4c06      	ldr	r4, [pc, #24]	; (8002d20 <CDC_Init_FS+0x1c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4906      	ldr	r1, [pc, #24]	; (8002d24 <CDC_Init_FS+0x20>)
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff f9ed 	bl	80020ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002d12:	4905      	ldr	r1, [pc, #20]	; (8002d28 <CDC_Init_FS+0x24>)
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7ff f9f1 	bl	80020fc <USBD_CDC_SetRxBuffer>
}
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	bd10      	pop	{r4, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000908 	.word	0x20000908
 8002d24:	20000f14 	.word	0x20000f14
 8002d28:	20000b2c 	.word	0x20000b2c

08002d2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002d2c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002d2e:	4c09      	ldr	r4, [pc, #36]	; (8002d54 <CDC_Transmit_FS+0x28>)
{
 8002d30:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002d32:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8002d36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d3a:	b943      	cbnz	r3, 8002d4e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7ff f9d4 	bl	80020ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002d44:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8002d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002d4a:	f7ff b9dd 	b.w	8002108 <USBD_CDC_TransmitPacket>
}
 8002d4e:	2001      	movs	r0, #1
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
 8002d54:	20000908 	.word	0x20000908

08002d58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002d58:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_PCD_MspInit+0x38>)
 8002d5c:	6802      	ldr	r2, [r0, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d112      	bne.n	8002d88 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d62:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002d66:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d68:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002d6a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d6e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002d72:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d74:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002d7e:	f7fd fa59 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002d82:	2014      	movs	r0, #20
 8002d84:	f7fd fa8a 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002d88:	b003      	add	sp, #12
 8002d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d8e:	bf00      	nop
 8002d90:	40005c00 	.word	0x40005c00

08002d94 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002d94:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002d98:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002d9c:	f7ff ba11 	b.w	80021c2 <USBD_LL_SetupStage>

08002da0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002da0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002da4:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002da8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dac:	f7ff ba36 	b.w	800221c <USBD_LL_DataOutStage>

08002db0 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002db0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db6:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dba:	f7ff ba61 	b.w	8002280 <USBD_LL_DataInStage>

08002dbe <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002dbe:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dc2:	f7ff badd 	b.w	8002380 <USBD_LL_SOF>

08002dc6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002dca:	2101      	movs	r1, #1
 8002dcc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002dd0:	f7ff fac4 	bl	800235c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002dd4:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002ddc:	f7ff ba9f 	b.w	800231e <USBD_LL_Reset>

08002de0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002de4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002de8:	f7ff fabb 	bl	8002362 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002dec:	69a3      	ldr	r3, [r4, #24]
 8002dee:	b123      	cbz	r3, 8002dfa <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002df0:	4a02      	ldr	r2, [pc, #8]	; (8002dfc <HAL_PCD_SuspendCallback+0x1c>)
 8002df2:	6913      	ldr	r3, [r2, #16]
 8002df4:	f043 0306 	orr.w	r3, r3, #6
 8002df8:	6113      	str	r3, [r2, #16]
 8002dfa:	bd10      	pop	{r4, pc}
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002e00:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002e04:	f7ff bab6 	b.w	8002374 <USBD_LL_Resume>

08002e08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002e08:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	f04f 0e03 	mov.w	lr, #3
{
 8002e12:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002e14:	491d      	ldr	r1, [pc, #116]	; (8002e8c <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 8002e16:	481e      	ldr	r0, [pc, #120]	; (8002e90 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002e18:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e1c:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002e1e:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002e22:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e26:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e28:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e2a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e2c:	f7fd fd70 	bl	8000910 <HAL_PCD_Init>
 8002e30:	b120      	cbz	r0, 8002e3c <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e32:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002e36:	4817      	ldr	r0, [pc, #92]	; (8002e94 <USBD_LL_Init+0x8c>)
 8002e38:	f7ff fe86 	bl	8002b48 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2318      	movs	r3, #24
 8002e40:	4611      	mov	r1, r2
 8002e42:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e46:	f7fe f935 	bl	80010b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002e4a:	2358      	movs	r3, #88	; 0x58
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e54:	f7fe f92e 	bl	80010b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002e58:	23c0      	movs	r3, #192	; 0xc0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2181      	movs	r1, #129	; 0x81
 8002e5e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e62:	f7fe f927 	bl	80010b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002e66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e72:	f7fe f91f 	bl	80010b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2182      	movs	r1, #130	; 0x82
 8002e7e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002e82:	f7fe f917 	bl	80010b4 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8002e86:	2000      	movs	r0, #0
 8002e88:	bd10      	pop	{r4, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40005c00 	.word	0x40005c00
 8002e90:	200012fc 	.word	0x200012fc
 8002e94:	0800315b 	.word	0x0800315b

08002e98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002e98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002e9a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002e9e:	f7fd fda0 	bl	80009e2 <HAL_PCD_Start>
 8002ea2:	2803      	cmp	r0, #3
 8002ea4:	bf9a      	itte	ls
 8002ea6:	4b02      	ldrls	r3, [pc, #8]	; (8002eb0 <USBD_LL_Start+0x18>)
 8002ea8:	5c18      	ldrbls	r0, [r3, r0]
 8002eaa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002eac:	bd08      	pop	{r3, pc}
 8002eae:	bf00      	nop
 8002eb0:	08003157 	.word	0x08003157

08002eb4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002eb8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	f7fd fdba 	bl	8000a38 <HAL_PCD_EP_Open>
 8002ec4:	2803      	cmp	r0, #3
 8002ec6:	bf9a      	itte	ls
 8002ec8:	4b01      	ldrls	r3, [pc, #4]	; (8002ed0 <USBD_LL_OpenEP+0x1c>)
 8002eca:	5c18      	ldrbls	r0, [r3, r0]
 8002ecc:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002ece:	bd10      	pop	{r4, pc}
 8002ed0:	08003157 	.word	0x08003157

08002ed4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002ed4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002ed6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002eda:	f7fd fdd0 	bl	8000a7e <HAL_PCD_EP_Close>
 8002ede:	2803      	cmp	r0, #3
 8002ee0:	bf9a      	itte	ls
 8002ee2:	4b02      	ldrls	r3, [pc, #8]	; (8002eec <USBD_LL_CloseEP+0x18>)
 8002ee4:	5c18      	ldrbls	r0, [r3, r0]
 8002ee6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ee8:	bd08      	pop	{r3, pc}
 8002eea:	bf00      	nop
 8002eec:	08003157 	.word	0x08003157

08002ef0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002ef0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002ef2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ef6:	f7fe f891 	bl	800101c <HAL_PCD_EP_SetStall>
 8002efa:	2803      	cmp	r0, #3
 8002efc:	bf9a      	itte	ls
 8002efe:	4b02      	ldrls	r3, [pc, #8]	; (8002f08 <USBD_LL_StallEP+0x18>)
 8002f00:	5c18      	ldrbls	r0, [r3, r0]
 8002f02:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f04:	bd08      	pop	{r3, pc}
 8002f06:	bf00      	nop
 8002f08:	08003157 	.word	0x08003157

08002f0c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f0c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002f0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f12:	f7fe f8ac 	bl	800106e <HAL_PCD_EP_ClrStall>
 8002f16:	2803      	cmp	r0, #3
 8002f18:	bf9a      	itte	ls
 8002f1a:	4b02      	ldrls	r3, [pc, #8]	; (8002f24 <USBD_LL_ClearStallEP+0x18>)
 8002f1c:	5c18      	ldrbls	r0, [r3, r0]
 8002f1e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f20:	bd08      	pop	{r3, pc}
 8002f22:	bf00      	nop
 8002f24:	08003157 	.word	0x08003157

08002f28 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002f28:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f2a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f2e:	bf45      	ittet	mi
 8002f30:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002f34:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f38:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f3c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f40:	bf58      	it	pl
 8002f42:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002f46:	4770      	bx	lr

08002f48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002f48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002f4a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f4e:	f7fd fd5f 	bl	8000a10 <HAL_PCD_SetAddress>
 8002f52:	2803      	cmp	r0, #3
 8002f54:	bf9a      	itte	ls
 8002f56:	4b02      	ldrls	r3, [pc, #8]	; (8002f60 <USBD_LL_SetUSBAddress+0x18>)
 8002f58:	5c18      	ldrbls	r0, [r3, r0]
 8002f5a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002f5c:	bd08      	pop	{r3, pc}
 8002f5e:	bf00      	nop
 8002f60:	08003157 	.word	0x08003157

08002f64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002f64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002f66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f6a:	f7fd fdc8 	bl	8000afe <HAL_PCD_EP_Transmit>
 8002f6e:	2803      	cmp	r0, #3
 8002f70:	bf9a      	itte	ls
 8002f72:	4b02      	ldrls	r3, [pc, #8]	; (8002f7c <USBD_LL_Transmit+0x18>)
 8002f74:	5c18      	ldrbls	r0, [r3, r0]
 8002f76:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002f78:	bd08      	pop	{r3, pc}
 8002f7a:	bf00      	nop
 8002f7c:	08003157 	.word	0x08003157

08002f80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002f80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002f82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002f86:	f7fd fd9b 	bl	8000ac0 <HAL_PCD_EP_Receive>
 8002f8a:	2803      	cmp	r0, #3
 8002f8c:	bf9a      	itte	ls
 8002f8e:	4b02      	ldrls	r3, [pc, #8]	; (8002f98 <USBD_LL_PrepareReceive+0x18>)
 8002f90:	5c18      	ldrbls	r0, [r3, r0]
 8002f92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002f94:	bd08      	pop	{r3, pc}
 8002f96:	bf00      	nop
 8002f98:	08003157 	.word	0x08003157

08002f9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f9c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002f9e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002fa2:	f7fd fda5 	bl	8000af0 <HAL_PCD_EP_GetRxCount>
}
 8002fa6:	bd08      	pop	{r3, pc}

08002fa8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002fa8:	4800      	ldr	r0, [pc, #0]	; (8002fac <USBD_static_malloc+0x4>)
 8002faa:	4770      	bx	lr
 8002fac:	20000688 	.word	0x20000688

08002fb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002fb2:	4770      	bx	lr

08002fb4 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002fb4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002fb6:	4801      	ldr	r0, [pc, #4]	; (8002fbc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002fb8:	800b      	strh	r3, [r1, #0]
}
 8002fba:	4770      	bx	lr
 8002fbc:	20000648 	.word	0x20000648

08002fc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002fc0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002fc2:	4801      	ldr	r0, [pc, #4]	; (8002fc8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002fc4:	800b      	strh	r3, [r1, #0]
}
 8002fc6:	4770      	bx	lr
 8002fc8:	2000065c 	.word	0x2000065c

08002fcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002fcc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002fce:	4c04      	ldr	r4, [pc, #16]	; (8002fe0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	f7ff fb74 	bl	80026c2 <USBD_GetString>
  return USBD_StrDesc;
}
 8002fda:	4620      	mov	r0, r4
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000175c 	.word	0x2000175c
 8002fe4:	08003187 	.word	0x08003187

08002fe8 <USBD_FS_ProductStrDescriptor>:
{
 8002fe8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002fea:	4c04      	ldr	r4, [pc, #16]	; (8002ffc <USBD_FS_ProductStrDescriptor+0x14>)
 8002fec:	460a      	mov	r2, r1
 8002fee:	4804      	ldr	r0, [pc, #16]	; (8003000 <USBD_FS_ProductStrDescriptor+0x18>)
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	f7ff fb66 	bl	80026c2 <USBD_GetString>
}
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	bd10      	pop	{r4, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000175c 	.word	0x2000175c
 8003000:	0800319a 	.word	0x0800319a

08003004 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003004:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003006:	4c04      	ldr	r4, [pc, #16]	; (8003018 <USBD_FS_SerialStrDescriptor+0x14>)
 8003008:	460a      	mov	r2, r1
 800300a:	4804      	ldr	r0, [pc, #16]	; (800301c <USBD_FS_SerialStrDescriptor+0x18>)
 800300c:	4621      	mov	r1, r4
 800300e:	f7ff fb58 	bl	80026c2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003012:	4620      	mov	r0, r4
 8003014:	bd10      	pop	{r4, pc}
 8003016:	bf00      	nop
 8003018:	2000175c 	.word	0x2000175c
 800301c:	080031b0 	.word	0x080031b0

08003020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003020:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003022:	4c04      	ldr	r4, [pc, #16]	; (8003034 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003024:	460a      	mov	r2, r1
 8003026:	4804      	ldr	r0, [pc, #16]	; (8003038 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003028:	4621      	mov	r1, r4
 800302a:	f7ff fb4a 	bl	80026c2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800302e:	4620      	mov	r0, r4
 8003030:	bd10      	pop	{r4, pc}
 8003032:	bf00      	nop
 8003034:	2000175c 	.word	0x2000175c
 8003038:	0800316e 	.word	0x0800316e

0800303c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800303c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800303e:	4c04      	ldr	r4, [pc, #16]	; (8003050 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003040:	460a      	mov	r2, r1
 8003042:	4804      	ldr	r0, [pc, #16]	; (8003054 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003044:	4621      	mov	r1, r4
 8003046:	f7ff fb3c 	bl	80026c2 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800304a:	4620      	mov	r0, r4
 800304c:	bd10      	pop	{r4, pc}
 800304e:	bf00      	nop
 8003050:	2000175c 	.word	0x2000175c
 8003054:	08003179 	.word	0x08003179

08003058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003058:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800305a:	e003      	b.n	8003064 <LoopCopyDataInit>

0800305c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800305e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003060:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003062:	3104      	adds	r1, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003064:	480a      	ldr	r0, [pc, #40]	; (8003090 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003068:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800306a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800306c:	d3f6      	bcc.n	800305c <CopyDataInit>
  ldr r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003070:	e002      	b.n	8003078 <LoopFillZerobss>

08003072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003074:	f842 3b04 	str.w	r3, [r2], #4

08003078 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800307a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800307c:	d3f9      	bcc.n	8003072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800307e:	f7ff fded 	bl	8002c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003082:	f000 f80f 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003086:	f7ff fcd1 	bl	8002a2c <main>
  bx lr
 800308a:	4770      	bx	lr
  ldr r3, =_sidata
 800308c:	080031c8 	.word	0x080031c8
  ldr r0, =_sdata
 8003090:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003094:	20000660 	.word	0x20000660
  ldr r2, =_sbss
 8003098:	20000660 	.word	0x20000660
  ldr r3, = _ebss
 800309c:	2000195c 	.word	0x2000195c

080030a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC1_2_IRQHandler>
	...

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	2500      	movs	r5, #0
 80030a8:	4e0c      	ldr	r6, [pc, #48]	; (80030dc <__libc_init_array+0x38>)
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1ba4      	subs	r4, r4, r6
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a5      	cmp	r5, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	f000 f822 	bl	80030fc <_init>
 80030b8:	2500      	movs	r5, #0
 80030ba:	4e0a      	ldr	r6, [pc, #40]	; (80030e4 <__libc_init_array+0x40>)
 80030bc:	4c0a      	ldr	r4, [pc, #40]	; (80030e8 <__libc_init_array+0x44>)
 80030be:	1ba4      	subs	r4, r4, r6
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a5      	cmp	r5, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030cc:	4798      	blx	r3
 80030ce:	3501      	adds	r5, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d6:	4798      	blx	r3
 80030d8:	3501      	adds	r5, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	080031c0 	.word	0x080031c0
 80030e0:	080031c0 	.word	0x080031c0
 80030e4:	080031c0 	.word	0x080031c0
 80030e8:	080031c4 	.word	0x080031c4

080030ec <strcpy>:
 80030ec:	4603      	mov	r3, r0
 80030ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030f2:	f803 2b01 	strb.w	r2, [r3], #1
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d1f9      	bne.n	80030ee <strcpy+0x2>
 80030fa:	4770      	bx	lr

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
